================================================================================
Command Line:
	train_classifier.py gridsearch gist /mnt/data/GIST/ -gt adaboost -at dt -gc 2 -gp {"base_estimator__criterion":["gini", "entropy"], "base_estimator__splitter":["best", "random"], "algorithm":["SAMME", "SAMME.R"], "learning_rate":[1, 2, 5, 10], "n_estimators":[2, 5, 10, 50]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: gist
Number of features: 320
================================================================================


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: AdaBoost (adaboost)
Grid Search Parameters: {'base_estimator__criterion': ['gini', 'entropy'], 'base_estimator__splitter': ['best', 'random'], 'algorithm': ['SAMME', 'SAMME.R'], 'learning_rate': [1, 2, 5, 10], 'n_estimators': [2, 5, 10, 50]}
================================================================================
Training Class Count:
================================================================================
	Trojan      10000
	Backdoor    10000
	Worm        10000
	Virus       10000
	Ransom      10000
	PUA         10000
================================================================================
Testing Class Count:
================================================================================
	Trojan      10000
	Backdoor    10000
	Worm        10000
	Virus       10000
	Ransom      10000
	PUA         10000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 38874.834404 seconds
================================================================================


================================================================================
Best Score: 0.9258333333333333
================================================================================
CV Results:
{'mean_fit_time': array([2.09303240e+02, 5.50523267e+02, 1.09374925e+03, 3.99136784e+03,
       2.15490846e+02, 3.91224060e+02, 8.39989732e+02, 2.29465654e+03,
       1.26617086e+02, 2.44354044e+02, 2.98149796e+02, 6.80322905e+02,
       1.22554452e+02, 1.54929275e+02, 2.03118073e+02, 5.79992204e+02,
       2.73734723e+01, 6.15671180e+01, 1.20545358e+02, 5.51987159e+02,
       2.58657349e+01, 5.05407943e+01, 9.76154214e+01, 4.93738389e+02,
       1.63805290e+01, 3.04323021e+01, 3.88029785e+01, 1.00608697e+02,
       1.87935889e+01, 2.24032787e+01, 3.00426149e+01, 9.39518582e+01,
       3.97143435e+02, 6.90025380e+02, 1.04338912e+03, 2.89131367e+04,
       2.73972530e+02, 4.03153864e+02, 7.19666362e+02, 3.07018630e+03,
       1.19018266e+02, 2.03083767e+02, 2.12754254e+02, 2.21902030e+02,
       1.18524975e+02, 1.14146607e+02, 1.03709830e+02, 1.00100931e+02,
       4.39930391e+00, 1.87081459e+01, 3.93332742e+01, 1.69732457e+02,
       6.97772157e+00, 1.59990388e+01, 2.91604894e+01, 1.52955363e+02,
       5.45720351e+00, 9.37360597e+00, 9.25497174e+00, 8.22707057e+00,
       4.92693853e+00, 4.03036582e+00, 5.68588281e+00, 7.09915495e+00,
       7.44717119e+01, 1.74797881e+02, 2.83729576e+02, 1.26042013e+03,
       8.09200468e+01, 1.46760614e+02, 2.43188533e+02, 1.02561381e+03,
       4.79606711e+01, 1.04794735e+02, 1.45334138e+02, 3.26942714e+02,
       1.58630810e+03, 1.62386705e+03, 1.86783489e+03, 1.17462946e+03,
       5.48740447e+00, 1.30690399e+01, 2.36169181e+01, 1.31365250e+02,
       5.06180716e+00, 1.11841305e+01, 2.18521427e+01, 9.56608984e+01,
       5.42652929e+00, 9.14770854e+00, 1.40065104e+01, 3.60843092e+01,
       4.55915737e+00, 5.96429884e+00, 8.41065013e+00, 1.27621577e+01,
       1.53231484e+02, 3.69544141e+02, 9.54336607e+02, 3.75118046e+03,
       1.54335838e+02, 4.06528231e+02, 4.03882041e+03, 3.02289936e+03,
       1.35860798e+02, 2.34154748e+03, 5.69253787e+03, 5.49624597e+03,
       1.02930522e+04, 8.78130459e+03, 1.08648997e+04, 1.25322933e+04,
       5.51585078e+00, 1.36948080e+01, 2.43723586e+01, 1.33388754e+02,
       5.12584269e+00, 1.18847632e+01, 2.11482259e+01, 9.81605760e+01,
       6.01656747e+00, 1.08700837e+01, 1.57727603e+01, 4.27205580e+01,
       4.31447136e+00, 7.91968822e+00, 1.14241135e+01, 1.18985747e+01]), 'std_fit_time': array([9.66171229e+00, 7.02660871e+00, 2.59073865e+00, 1.30022648e+03,
       5.28729081e+00, 2.08514498e+01, 3.19526470e+01, 4.81246805e+00,
       2.11925745e-01, 2.00272572e+00, 3.11708558e+00, 4.17603171e+00,
       4.99533713e+00, 8.10708487e+00, 2.69160402e+00, 5.71907020e+00,
       3.84691596e-01, 1.13939130e+00, 2.90951121e+00, 2.72168088e+00,
       8.41335654e-01, 9.16147351e-01, 4.42609990e+00, 1.74155338e+01,
       4.98733163e-01, 1.57930434e+00, 3.05243087e+00, 9.48580027e-01,
       8.48630905e-01, 3.36102128e-01, 3.63235474e-02, 1.11716926e+00,
       3.46401095e-01, 7.40989208e-01, 3.41557300e+00, 8.59568679e+03,
       1.35234059e+01, 1.83183274e+01, 6.99430627e+01, 1.34735502e+01,
       5.04022908e+00, 1.09376597e+00, 7.10904431e+00, 2.41779327e+00,
       1.57741952e+00, 2.48840225e+00, 7.29661119e+00, 1.11538343e+01,
       1.04241371e-02, 8.81985664e-01, 1.57136023e+00, 2.04009056e+01,
       2.04031825e-01, 1.49326742e+00, 5.47085643e-01, 1.04248023e+00,
       5.85011125e-01, 7.41007566e-01, 5.36925793e-02, 1.51130438e+00,
       2.08663702e-01, 3.63692403e-01, 3.19634676e-01, 3.67742538e-01,
       1.93425369e+00, 3.26724398e+00, 5.94961848e+01, 1.30709856e+02,
       5.32649326e+00, 3.10823834e+00, 8.52530003e-02, 1.73742511e+01,
       8.36997831e+00, 6.99872291e+00, 2.45953386e+01, 2.30438794e+01,
       1.56222275e+03, 1.59165656e+03, 1.81331310e+03, 8.25680784e+02,
       1.21505141e-01, 1.46436334e-01, 1.85546875e-02, 2.34208608e+00,
       3.18616867e-01, 5.62902808e-01, 4.10736799e-02, 2.58536983e+00,
       1.31214738e-01, 2.85370123e+00, 2.34750140e+00, 2.67603517e-01,
       1.91463470e+00, 1.92400897e+00, 3.58278048e+00, 1.63487339e+00,
       1.06566429e+00, 4.41785550e+00, 2.40021409e+02, 1.49751301e+02,
       9.14165378e-01, 6.88303748e+01, 3.32151836e+03, 1.24898429e+02,
       1.66447304e+01, 2.02438729e+03, 5.04140351e+03, 4.26386227e+03,
       5.90672420e+03, 6.45162010e+03, 3.95575754e+03, 5.45853604e+03,
       1.39699364e+00, 3.10421705e-01, 3.26000214e-01, 2.86656916e+00,
       2.66132712e-01, 2.04405141e+00, 1.01595223e+00, 1.50693309e+00,
       2.21268892e-01, 1.12252581e+00, 1.71501768e+00, 7.25446105e-01,
       1.24682391e+00, 2.25745821e+00, 4.75740194e-01, 5.07427335e-01]), 'mean_score_time': array([0.26026893, 0.51193321, 1.06572843, 1.35227537, 0.25596082,
       0.51869869, 0.94950533, 1.02461088, 0.21080434, 0.38871384,
       0.58272493, 2.33569467, 0.20962191, 0.32226455, 0.5512687 ,
       1.90214491, 0.17223299, 0.53745377, 1.03343964, 4.54958081,
       0.24454129, 0.50184405, 0.91441202, 3.36370492, 0.21948743,
       0.4044838 , 0.5655961 , 2.23151696, 0.27683544, 0.32714248,
       0.55050945, 2.24090409, 0.09900272, 0.14131486, 0.3196882 ,
       2.12708926, 0.08131731, 0.12367606, 0.19685042, 0.87988162,
       0.05779457, 0.11095023, 0.20529342, 0.81808197, 0.06473601,
       0.12642217, 0.18542027, 0.69451606, 0.04890633, 0.16559958,
       0.43229854, 1.45928049, 0.07493544, 0.19607818, 0.37001622,
       1.55974686, 0.08724463, 0.15520656, 0.21528244, 0.60776877,
       0.05947578, 0.06897414, 0.21896052, 0.80168533, 0.10990369,
       0.18387496, 0.36581445, 1.89644539, 0.11296082, 0.22198284,
       0.36304557, 1.88183653, 0.06374621, 0.14209354, 0.33045995,
       1.72369933, 0.22978306, 0.45873034, 0.53227186, 1.47572517,
       0.07059979, 0.20673275, 0.48766446, 2.15746295, 0.10736179,
       0.20411062, 0.45312333, 1.7683084 , 0.08121681, 0.24980855,
       0.28343987, 1.59960639, 0.1129272 , 0.21106255, 0.34290123,
       2.37786186, 0.09716177, 0.18772054, 0.36404443, 1.86411476,
       0.0662545 , 0.17030668, 0.51038742, 1.66777682, 0.07337916,
       0.26399922, 0.58737314, 1.74957573, 0.5584594 , 0.56078494,
       0.60799122, 1.88389313, 0.07944143, 0.26834321, 0.35745072,
       1.99282479, 0.06787765, 0.21757746, 0.41597414, 1.89960814,
       0.10558057, 0.24213338, 0.26541996, 1.82778156, 0.06641471,
       0.30404043, 0.34473026, 1.23886395]), 'std_score_time': array([2.30622292e-03, 3.36015224e-03, 9.06791687e-02, 1.44706964e-01,
       3.13055515e-03, 2.28309631e-03, 1.26156807e-02, 1.37292027e-01,
       1.37444735e-02, 2.50744820e-03, 1.19745731e-03, 1.14728808e-01,
       1.53110027e-02, 1.17337704e-03, 3.48929167e-02, 1.75162792e-01,
       1.07528090e-01, 1.84458494e-02, 5.70275784e-02, 2.31301785e-01,
       1.40434504e-02, 1.12251043e-02, 1.29041672e-02, 1.45528316e-01,
       1.96480751e-02, 9.52100754e-03, 8.47127438e-02, 3.02547216e-02,
       9.62591171e-03, 4.76937294e-02, 1.80172920e-03, 5.52415848e-02,
       9.63366032e-03, 2.15076208e-02, 1.99949741e-03, 5.62987566e-01,
       3.26701403e-02, 1.76079273e-02, 1.91649199e-02, 3.22406292e-02,
       1.53410435e-02, 4.19831276e-03, 4.33354378e-02, 3.59474421e-02,
       2.51682997e-02, 2.78725624e-02, 7.13698864e-02, 2.39374995e-01,
       3.19719315e-04, 5.48803806e-02, 2.19660997e-02, 3.47232103e-01,
       2.20997334e-02, 2.18272209e-04, 3.08789015e-02, 3.10099721e-01,
       2.85017490e-03, 2.47775316e-02, 3.67383957e-02, 1.36586666e-01,
       1.55707598e-02, 5.52296638e-04, 2.55763531e-02, 1.11550808e-01,
       3.95618677e-02, 3.37946415e-03, 6.86678886e-02, 3.01737666e-01,
       4.37407494e-02, 7.21236467e-02, 7.44403601e-02, 1.04233027e-02,
       3.18980217e-03, 1.49500370e-03, 8.81036520e-02, 1.67967558e-01,
       1.72253370e-01, 2.15583682e-01, 2.48729229e-01, 1.02888107e-01,
       3.95727158e-03, 4.96778488e-02, 1.25102520e-01, 3.89379263e-02,
       3.65672112e-02, 5.80253601e-02, 1.53531075e-01, 2.09938765e-01,
       9.93561745e-03, 9.53669548e-02, 2.81417370e-02, 2.95269608e-01,
       4.02359962e-02, 2.94839144e-02, 4.50332165e-02, 1.06741226e+00,
       3.19693089e-02, 4.28624153e-02, 4.13014889e-02, 2.86683559e-01,
       8.53180885e-04, 3.90648842e-03, 7.95378685e-02, 1.89925909e-01,
       8.35883617e-03, 6.13667965e-02, 8.02899599e-02, 1.59524083e-01,
       3.38052630e-01, 3.23828816e-01, 1.98922157e-01, 4.80250478e-01,
       1.38212442e-02, 1.50654316e-02, 2.09412575e-02, 3.24161530e-01,
       1.49953365e-03, 7.47559071e-02, 1.21777773e-01, 2.81265974e-01,
       1.54538155e-02, 6.39533997e-02, 6.52050972e-03, 1.30736828e-03,
       8.25762749e-04, 5.29429913e-02, 8.83868933e-02, 1.42677069e-01]), 'param_algorithm': masked_array(data=['SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_base_estimator__criterion': masked_array(data=['gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_base_estimator__splitter': masked_array(data=['best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[1, 1, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1,
                   1, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1,
                   1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1,
                   1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1,
                   2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2,
                   2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2, 2,
                   2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2, 2, 2,
                   2, 5, 5, 5, 5, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}], 'split0_test_score': array([0.864     , 0.89736667, 0.9055    , 0.9158    , 0.8692    ,
       0.88086667, 0.89126667, 0.9093    , 0.1606    , 0.16666667,
       0.16666667, 0.16666667, 0.15186667, 0.16666667, 0.16666667,
       0.16666667, 0.87213333, 0.90496667, 0.9112    , 0.91986667,
       0.87276667, 0.882     , 0.8982    , 0.91373333, 0.18976667,
       0.16666667, 0.16666667, 0.16666667, 0.18753333, 0.16666667,
       0.16666667, 0.16666667, 0.8746    , 0.90213333, 0.90983333,
       0.9187    , 0.87086667, 0.8085    , 0.88673333, 0.90943333,
       0.14793333, 0.16666667, 0.16666667, 0.16666667, 0.15006667,
       0.16666667, 0.16666667, 0.16666667, 0.87463333, 0.90366667,
       0.91193333, 0.922     , 0.87346667, 0.82913333, 0.89833333,
       0.91546667, 0.17603333, 0.16666667, 0.16666667, 0.16666667,
       0.16456667, 0.16666667, 0.16666667, 0.16666667, 0.87613333,
       0.88096667, 0.90043333, 0.91796667, 0.87386667, 0.89753333,
       0.89973333, 0.904     , 0.8686    , 0.83173333, 0.75793333,
       0.5992    , 0.873     , 0.8737    , 0.85783333, 0.38603333,
       0.8746    , 0.90763333, 0.915     , 0.92106667, 0.8761    ,
       0.89993333, 0.90503333, 0.90863333, 0.8733    , 0.81433333,
       0.76423333, 0.46976667, 0.87063333, 0.8735    , 0.852     ,
       0.783     , 0.87376667, 0.8918    , 0.9086    , 0.91896667,
       0.87496667, 0.89963333, 0.9053    , 0.90956667, 0.87466667,
       0.8021    , 0.8783    , 0.64523333, 0.86723333, 0.86316667,
       0.5277    , 0.4712    , 0.87773333, 0.9045    , 0.91446667,
       0.91896667, 0.8781    , 0.90026667, 0.90583333, 0.91196667,
       0.87456667, 0.87533333, 0.7902    , 0.58093333, 0.87826667,
       0.8353    , 0.48133333, 0.42853333]), 'split1_test_score': array([0.88156667, 0.91016667, 0.91606667, 0.92446667, 0.8822    ,
       0.89176667, 0.90603333, 0.91776667, 0.14626667, 0.16666667,
       0.16666667, 0.16666667, 0.21236667, 0.16666667, 0.16666667,
       0.16666667, 0.88313333, 0.91496667, 0.9202    , 0.92906667,
       0.8826    , 0.89463333, 0.90676667, 0.92263333, 0.19046667,
       0.16666667, 0.16666667, 0.16666667, 0.115     , 0.16666667,
       0.16666667, 0.16666667, 0.88626667, 0.9131    , 0.91906667,
       0.92753333, 0.88596667, 0.8622    , 0.8787    , 0.92046667,
       0.15843333, 0.16666667, 0.16666667, 0.16666667, 0.11143333,
       0.16666667, 0.16666667, 0.16666667, 0.8853    , 0.91283333,
       0.92156667, 0.92966667, 0.88626667, 0.86926667, 0.90256667,
       0.92066667, 0.24546667, 0.16666667, 0.16666667, 0.16666667,
       0.14583333, 0.16666667, 0.16666667, 0.16666667, 0.8869    ,
       0.89316667, 0.912     , 0.92576667, 0.88433333, 0.9101    ,
       0.91443333, 0.9148    , 0.8863    , 0.81926667, 0.74536667,
       0.49483333, 0.87243333, 0.86616667, 0.84606667, 0.42006667,
       0.88813333, 0.9175    , 0.9241    , 0.92746667, 0.88793333,
       0.91016667, 0.91416667, 0.91633333, 0.8854    , 0.8835    ,
       0.85403333, 0.57083333, 0.88493333, 0.76093333, 0.77413333,
       0.5994    , 0.8894    , 0.90043333, 0.91433333, 0.9263    ,
       0.88693333, 0.9083    , 0.9151    , 0.91826667, 0.88503333,
       0.8925    , 0.86716667, 0.6659    , 0.85896667, 0.84483333,
       0.77356667, 0.52933333, 0.8858    , 0.91703333, 0.9235    ,
       0.92916667, 0.88693333, 0.9124    , 0.91933333, 0.92243333,
       0.88766667, 0.90336667, 0.8951    , 0.6319    , 0.88743333,
       0.80666667, 0.74796667, 0.66253333]), 'mean_test_score': array([0.87278333, 0.90376667, 0.91078333, 0.92013333, 0.8757    ,
       0.88631667, 0.89865   , 0.91353333, 0.15343333, 0.16666667,
       0.16666667, 0.16666667, 0.18211667, 0.16666667, 0.16666667,
       0.16666667, 0.87763333, 0.90996667, 0.9157    , 0.92446667,
       0.87768333, 0.88831667, 0.90248333, 0.91818333, 0.19011667,
       0.16666667, 0.16666667, 0.16666667, 0.15126667, 0.16666667,
       0.16666667, 0.16666667, 0.88043333, 0.90761667, 0.91445   ,
       0.92311667, 0.87841667, 0.83535   , 0.88271667, 0.91495   ,
       0.15318333, 0.16666667, 0.16666667, 0.16666667, 0.13075   ,
       0.16666667, 0.16666667, 0.16666667, 0.87996667, 0.90825   ,
       0.91675   , 0.92583333, 0.87986667, 0.8492    , 0.90045   ,
       0.91806667, 0.21075   , 0.16666667, 0.16666667, 0.16666667,
       0.1552    , 0.16666667, 0.16666667, 0.16666667, 0.88151667,
       0.88706667, 0.90621667, 0.92186667, 0.8791    , 0.90381667,
       0.90708333, 0.9094    , 0.87745   , 0.8255    , 0.75165   ,
       0.54701667, 0.87271667, 0.86993333, 0.85195   , 0.40305   ,
       0.88136667, 0.91256667, 0.91955   , 0.92426667, 0.88201667,
       0.90505   , 0.9096    , 0.91248333, 0.87935   , 0.84891667,
       0.80913333, 0.5203    , 0.87778333, 0.81721667, 0.81306667,
       0.6912    , 0.88158333, 0.89611667, 0.91146667, 0.92263333,
       0.88095   , 0.90396667, 0.9102    , 0.91391667, 0.87985   ,
       0.8473    , 0.87273333, 0.65556667, 0.8631    , 0.854     ,
       0.65063333, 0.50026667, 0.88176667, 0.91076667, 0.91898333,
       0.92406667, 0.88251667, 0.90633333, 0.91258333, 0.9172    ,
       0.88111667, 0.88935   , 0.84265   , 0.60641667, 0.88285   ,
       0.82098333, 0.61465   , 0.54553333]), 'std_test_score': array([0.00878333, 0.0064    , 0.00528333, 0.00433333, 0.0065    ,
       0.00545   , 0.00738333, 0.00423333, 0.00716667, 0.        ,
       0.        , 0.        , 0.03025   , 0.        , 0.        ,
       0.        , 0.0055    , 0.005     , 0.0045    , 0.0046    ,
       0.00491667, 0.00631667, 0.00428333, 0.00445   , 0.00035   ,
       0.        , 0.        , 0.        , 0.03626667, 0.        ,
       0.        , 0.        , 0.00583333, 0.00548333, 0.00461667,
       0.00441667, 0.00755   , 0.02685   , 0.00401667, 0.00551667,
       0.00525   , 0.        , 0.        , 0.        , 0.01931667,
       0.        , 0.        , 0.        , 0.00533333, 0.00458333,
       0.00481667, 0.00383333, 0.0064    , 0.02006667, 0.00211667,
       0.0026    , 0.03471667, 0.        , 0.        , 0.        ,
       0.00936667, 0.        , 0.        , 0.        , 0.00538333,
       0.0061    , 0.00578333, 0.0039    , 0.00523333, 0.00628333,
       0.00735   , 0.0054    , 0.00885   , 0.00623333, 0.00628333,
       0.05218333, 0.00028333, 0.00376667, 0.00588333, 0.01701667,
       0.00676667, 0.00493333, 0.00455   , 0.0032    , 0.00591667,
       0.00511667, 0.00456667, 0.00385   , 0.00605   , 0.03458333,
       0.0449    , 0.05053333, 0.00715   , 0.05628333, 0.03893333,
       0.0918    , 0.00781667, 0.00431667, 0.00286667, 0.00366667,
       0.00598333, 0.00433333, 0.0049    , 0.00435   , 0.00518333,
       0.0452    , 0.00556667, 0.01033333, 0.00413333, 0.00916667,
       0.12293333, 0.02906667, 0.00403333, 0.00626667, 0.00451667,
       0.0051    , 0.00441667, 0.00606667, 0.00675   , 0.00523333,
       0.00655   , 0.01401667, 0.05245   , 0.02548333, 0.00458333,
       0.01431667, 0.13331667, 0.117     ]), 'rank_test_score': array([ 69,  38,  24,   8,  68,  46,  41,  19, 125, 100, 100, 100,  99,
       100, 100, 100,  66,  27,  15,   2,  65,  44,  39,  11,  98, 100,
       100, 100, 127, 100, 100, 100,  57,  31,  17,   5,  63,  80,  48,
        16, 126, 100, 100, 100, 128, 100, 100, 100,  58,  30,  14,   1,
        59,  76,  40,  12,  97, 100, 100, 100, 124, 100, 100, 100,  53,
        45,  34,   7,  62,  37,  32,  29,  67,  81,  86,  92,  71,  72,
        75,  96,  54,  21,   9,   3,  50,  35,  28,  22,  61,  77,  85,
        94,  64,  83,  84,  87,  52,  42,  23,   6,  56,  36,  26,  18,
        60,  78,  70,  88,  73,  74,  89,  95,  51,  25,  10,   4,  49,
        33,  20,  13,  55,  43,  79,  91,  47,  82,  90,  93], dtype=int32), 'split0_train_score': array([0.9971    , 0.9992    , 0.99843333, 0.99843333, 0.99703333,
       0.9992    , 0.9992    , 0.99876667, 0.1607    , 0.16666667,
       0.16666667, 0.16666667, 0.15253333, 0.16666667, 0.16666667,
       0.16666667, 0.9971    , 0.9992    , 0.99843333, 0.99843333,
       0.99706667, 0.9992    , 0.99906667, 0.99896667, 0.20293333,
       0.16666667, 0.16666667, 0.16666667, 0.19816667, 0.16666667,
       0.16666667, 0.16666667, 0.9971    , 0.9992    , 0.99843333,
       0.99843333, 0.9971    , 0.9227    , 0.9971    , 0.99883333,
       0.15246667, 0.16666667, 0.16666667, 0.16666667, 0.1504    ,
       0.16666667, 0.16666667, 0.16666667, 0.9971    , 0.9992    ,
       0.99843333, 0.99843333, 0.9971    , 0.95113333, 0.9971    ,
       0.99896667, 0.17933333, 0.16666667, 0.16666667, 0.16666667,
       0.1609    , 0.16666667, 0.16666667, 0.16666667, 0.9992    ,
       0.9992    , 0.9992    , 0.99916667, 0.9988    , 0.99886667,
       0.99753333, 0.99843333, 0.9971    , 0.95383333, 0.86586667,
       0.66606667, 0.99753333, 0.99756667, 0.977     , 0.43346667,
       0.9992    , 0.9992    , 0.9992    , 0.99896667, 0.9988    ,
       0.99743333, 0.99866667, 0.9981    , 0.9971    , 0.92886667,
       0.866     , 0.5182    , 0.99753333, 0.997     , 0.96833333,
       0.87593333, 0.9992    , 0.9992    , 0.9992    , 0.9992    ,
       0.9988    , 0.9992    , 0.9988    , 0.9989    , 0.9971    ,
       0.92053333, 0.99516667, 0.71703333, 0.9971    , 0.99143333,
       0.61583333, 0.52003333, 0.9992    , 0.9992    , 0.9992    ,
       0.9992    , 0.9988    , 0.99856667, 0.9989    , 0.99746667,
       0.9971    , 0.98783333, 0.8888    , 0.64843333, 0.99726667,
       0.94456667, 0.5396    , 0.48963333]), 'split1_train_score': array([0.999     , 0.99916667, 0.999     , 0.999     , 0.9986    ,
       0.99916667, 0.99906667, 0.99916667, 0.15      , 0.16666667,
       0.16666667, 0.16666667, 0.21486667, 0.16666667, 0.16666667,
       0.16666667, 0.999     , 0.99916667, 0.999     , 0.999     ,
       0.99876667, 0.99916667, 0.999     , 0.99906667, 0.1887    ,
       0.16666667, 0.16666667, 0.16666667, 0.1134    , 0.16666667,
       0.16666667, 0.16666667, 0.999     , 0.99916667, 0.999     ,
       0.999     , 0.999     , 0.99916667, 0.999     , 0.99913333,
       0.15873333, 0.16666667, 0.16666667, 0.16666667, 0.1195    ,
       0.16666667, 0.16666667, 0.16666667, 0.999     , 0.99916667,
       0.999     , 0.999     , 0.999     , 0.9948    , 0.9987    ,
       0.9991    , 0.24206667, 0.16666667, 0.16666667, 0.16666667,
       0.14766667, 0.16666667, 0.16666667, 0.16666667, 0.99916667,
       0.99916667, 0.99916667, 0.99916667, 0.99913333, 0.99916667,
       0.99903333, 0.99863333, 0.999     , 0.91526667, 0.83493333,
       0.54833333, 0.999     , 0.99436667, 0.95863333, 0.47136667,
       0.99916667, 0.99916667, 0.99916667, 0.9991    , 0.99913333,
       0.99903333, 0.99903333, 0.9984    , 0.999     , 0.9989    ,
       0.9557    , 0.6352    , 0.999     , 0.85136667, 0.87293333,
       0.67936667, 0.99916667, 0.99916667, 0.99916667, 0.99916667,
       0.99913333, 0.99916667, 0.99913333, 0.99903333, 0.999     ,
       0.99886667, 0.98783333, 0.74596667, 0.999     , 0.98373333,
       0.88676667, 0.62266667, 0.99916667, 0.99916667, 0.99916667,
       0.99916667, 0.99913333, 0.99916667, 0.9991    , 0.99913333,
       0.999     , 0.999     , 0.9962    , 0.70576667, 0.999     ,
       0.90533333, 0.81523333, 0.7184    ]), 'mean_train_score': array([0.99805   , 0.99918333, 0.99871667, 0.99871667, 0.99781667,
       0.99918333, 0.99913333, 0.99896667, 0.15535   , 0.16666667,
       0.16666667, 0.16666667, 0.1837    , 0.16666667, 0.16666667,
       0.16666667, 0.99805   , 0.99918333, 0.99871667, 0.99871667,
       0.99791667, 0.99918333, 0.99903333, 0.99901667, 0.19581667,
       0.16666667, 0.16666667, 0.16666667, 0.15578333, 0.16666667,
       0.16666667, 0.16666667, 0.99805   , 0.99918333, 0.99871667,
       0.99871667, 0.99805   , 0.96093333, 0.99805   , 0.99898333,
       0.1556    , 0.16666667, 0.16666667, 0.16666667, 0.13495   ,
       0.16666667, 0.16666667, 0.16666667, 0.99805   , 0.99918333,
       0.99871667, 0.99871667, 0.99805   , 0.97296667, 0.9979    ,
       0.99903333, 0.2107    , 0.16666667, 0.16666667, 0.16666667,
       0.15428333, 0.16666667, 0.16666667, 0.16666667, 0.99918333,
       0.99918333, 0.99918333, 0.99916667, 0.99896667, 0.99901667,
       0.99828333, 0.99853333, 0.99805   , 0.93455   , 0.8504    ,
       0.6072    , 0.99826667, 0.99596667, 0.96781667, 0.45241667,
       0.99918333, 0.99918333, 0.99918333, 0.99903333, 0.99896667,
       0.99823333, 0.99885   , 0.99825   , 0.99805   , 0.96388333,
       0.91085   , 0.5767    , 0.99826667, 0.92418333, 0.92063333,
       0.77765   , 0.99918333, 0.99918333, 0.99918333, 0.99918333,
       0.99896667, 0.99918333, 0.99896667, 0.99896667, 0.99805   ,
       0.9597    , 0.9915    , 0.7315    , 0.99805   , 0.98758333,
       0.7513    , 0.57135   , 0.99918333, 0.99918333, 0.99918333,
       0.99918333, 0.99896667, 0.99886667, 0.999     , 0.9983    ,
       0.99805   , 0.99341667, 0.9425    , 0.6771    , 0.99813333,
       0.92495   , 0.67741667, 0.60401667]), 'std_train_score': array([9.50000000e-04, 1.66666667e-05, 2.83333333e-04, 2.83333333e-04,
       7.83333333e-04, 1.66666667e-05, 6.66666667e-05, 2.00000000e-04,
       5.35000000e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       3.11666667e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.50000000e-04, 1.66666667e-05, 2.83333333e-04, 2.83333333e-04,
       8.50000000e-04, 1.66666667e-05, 3.33333333e-05, 5.00000000e-05,
       7.11666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.23833333e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.50000000e-04, 1.66666667e-05, 2.83333333e-04, 2.83333333e-04,
       9.50000000e-04, 3.82333333e-02, 9.50000000e-04, 1.50000000e-04,
       3.13333333e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.54500000e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.50000000e-04, 1.66666667e-05, 2.83333333e-04, 2.83333333e-04,
       9.50000000e-04, 2.18333333e-02, 8.00000000e-04, 6.66666667e-05,
       3.13666667e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       6.61666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 0.00000000e+00,
       1.66666667e-04, 1.50000000e-04, 7.50000000e-04, 1.00000000e-04,
       9.50000000e-04, 1.92833333e-02, 1.54666667e-02, 5.88666667e-02,
       7.33333333e-04, 1.60000000e-03, 9.18333333e-03, 1.89500000e-02,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 6.66666667e-05,
       1.66666667e-04, 8.00000000e-04, 1.83333333e-04, 1.50000000e-04,
       9.50000000e-04, 3.50166667e-02, 4.48500000e-02, 5.85000000e-02,
       7.33333333e-04, 7.28166667e-02, 4.77000000e-02, 9.82833333e-02,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-04, 1.66666667e-05, 1.66666667e-04, 6.66666667e-05,
       9.50000000e-04, 3.91666667e-02, 3.66666667e-03, 1.44666667e-02,
       9.50000000e-04, 3.85000000e-03, 1.35466667e-01, 5.13166667e-02,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-04, 3.00000000e-04, 1.00000000e-04, 8.33333333e-04,
       9.50000000e-04, 5.58333333e-03, 5.37000000e-02, 2.86666667e-02,
       8.66666667e-04, 1.96166667e-02, 1.37816667e-01, 1.14383333e-01])}
================================================================================
Params:
[{'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}]
================================================================================
Mean Test Score: [0.87278333 0.90376667 0.91078333 0.92013333 0.8757     0.88631667
 0.89865    0.91353333 0.15343333 0.16666667 0.16666667 0.16666667
 0.18211667 0.16666667 0.16666667 0.16666667 0.87763333 0.90996667
 0.9157     0.92446667 0.87768333 0.88831667 0.90248333 0.91818333
 0.19011667 0.16666667 0.16666667 0.16666667 0.15126667 0.16666667
 0.16666667 0.16666667 0.88043333 0.90761667 0.91445    0.92311667
 0.87841667 0.83535    0.88271667 0.91495    0.15318333 0.16666667
 0.16666667 0.16666667 0.13075    0.16666667 0.16666667 0.16666667
 0.87996667 0.90825    0.91675    0.92583333 0.87986667 0.8492
 0.90045    0.91806667 0.21075    0.16666667 0.16666667 0.16666667
 0.1552     0.16666667 0.16666667 0.16666667 0.88151667 0.88706667
 0.90621667 0.92186667 0.8791     0.90381667 0.90708333 0.9094
 0.87745    0.8255     0.75165    0.54701667 0.87271667 0.86993333
 0.85195    0.40305    0.88136667 0.91256667 0.91955    0.92426667
 0.88201667 0.90505    0.9096     0.91248333 0.87935    0.84891667
 0.80913333 0.5203     0.87778333 0.81721667 0.81306667 0.6912
 0.88158333 0.89611667 0.91146667 0.92263333 0.88095    0.90396667
 0.9102     0.91391667 0.87985    0.8473     0.87273333 0.65556667
 0.8631     0.854      0.65063333 0.50026667 0.88176667 0.91076667
 0.91898333 0.92406667 0.88251667 0.90633333 0.91258333 0.9172
 0.88111667 0.88935    0.84265    0.60641667 0.88285    0.82098333
 0.61465    0.54553333]
================================================================================
Best Params: {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}
================================================================================



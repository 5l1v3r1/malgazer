================================================================================
Command Line:
	train_classifier.py gridsearch rwe /mnt/virustotal/RWE/ -gt knn -gc 2 -gp {"n_neighbors":[1, 5, 10, 50], "weights":["uniform", "distance"]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: rwe
	Window Size: 256
	Data points: 1,024
Number of features: 1,024
================================================================================


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: k-Nearest Neighbors (knn)
Grid Search Parameters: {'n_neighbors': [1, 5, 10, 50], 'weights': ['uniform', 'distance']}
================================================================================
Training Class Count:
================================================================================
	Worm        10000
	Trojan      10000
	PUA         10000
	Backdoor    10000
	Virus       10000
	Ransom      10000
================================================================================
Testing Class Count:
================================================================================
	Worm        10000
	Trojan      10000
	PUA         10000
	Backdoor    10000
	Virus       10000
	Ransom      10000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 6993.319269 seconds
================================================================================


================================================================================
Best Score: 0.8877166666666667
================================================================================
CV Results:
{'mean_fit_time': array([3.19474852, 3.24244094, 3.3123877 , 3.42954385, 3.53764629,
       3.63385844, 3.58302009, 3.38189268]), 'std_fit_time': array([0.01885068, 0.01941609, 0.03773761, 0.06666028, 0.06608009,
       0.07850218, 0.00902784, 0.02986693]), 'mean_score_time': array([ 415.50925136,  415.57385099,  590.27219772,  588.56921589,
        701.84039915,  702.39317143, 3040.45220339, 3047.51748729]), 'std_score_time': array([ 9.70542693,  8.31765401, 15.73932076, 14.98904335, 15.25850332,
       16.15454447, 26.12153256, 18.12509513]), 'param_n_neighbors': masked_array(data=[1, 1, 5, 5, 10, 10, 50, 50],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_weights': masked_array(data=['uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance'],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'n_neighbors': 1, 'weights': 'uniform'}, {'n_neighbors': 1, 'weights': 'distance'}, {'n_neighbors': 5, 'weights': 'uniform'}, {'n_neighbors': 5, 'weights': 'distance'}, {'n_neighbors': 10, 'weights': 'uniform'}, {'n_neighbors': 10, 'weights': 'distance'}, {'n_neighbors': 50, 'weights': 'uniform'}, {'n_neighbors': 50, 'weights': 'distance'}], 'split0_test_score': array([0.8849    , 0.8849    , 0.8309    , 0.84643333, 0.78413333,
       0.8228    , 0.6981    , 0.76163333]), 'split1_test_score': array([0.89053333, 0.89053333, 0.8368    , 0.85296667, 0.7932    ,
       0.82933333, 0.71013333, 0.7756    ]), 'mean_test_score': array([0.88771667, 0.88771667, 0.83385   , 0.8497    , 0.78866667,
       0.82606667, 0.70411667, 0.76861667]), 'std_test_score': array([0.00281667, 0.00281667, 0.00295   , 0.00326667, 0.00453333,
       0.00326667, 0.00601667, 0.00698333]), 'rank_test_score': array([1, 1, 4, 3, 6, 5, 8, 7], dtype=int32), 'split0_train_score': array([0.99886667, 0.99886667, 0.875     , 0.99886667, 0.81126667,
       0.99886667, 0.71833333, 0.99886667]), 'split1_train_score': array([0.9988    , 0.9988    , 0.87086667, 0.99863333, 0.80913333,
       0.99873333, 0.7084    , 0.99873333]), 'mean_train_score': array([0.99883333, 0.99883333, 0.87293333, 0.99875   , 0.8102    ,
       0.9988    , 0.71336667, 0.9988    ]), 'std_train_score': array([3.33333333e-05, 3.33333333e-05, 2.06666667e-03, 1.16666667e-04,
       1.06666667e-03, 6.66666667e-05, 4.96666667e-03, 6.66666667e-05])}
================================================================================
Params:
[{'n_neighbors': 1, 'weights': 'uniform'}, {'n_neighbors': 1, 'weights': 'distance'}, {'n_neighbors': 5, 'weights': 'uniform'}, {'n_neighbors': 5, 'weights': 'distance'}, {'n_neighbors': 10, 'weights': 'uniform'}, {'n_neighbors': 10, 'weights': 'distance'}, {'n_neighbors': 50, 'weights': 'uniform'}, {'n_neighbors': 50, 'weights': 'distance'}]
================================================================================
Mean Test Score: [0.88771667 0.88771667 0.83385    0.8497     0.78866667 0.82606667
 0.70411667 0.76861667]
================================================================================
Best Params: {'n_neighbors': 1, 'weights': 'uniform'}
================================================================================



================================================================================
Command Line:
	train_classifier.py gridsearch gist /mnt/data/GIST/ -t 0.9 -gt svm -gc 2 -gp {"kernel":["rbf","poly","linear","sigmoid"], "C":[0.1, 1, 10, 100, 1000, 10000, 100000]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: gist
Number of features: 320
================================================================================


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: Support Vector Machine (svm)
Grid Search Parameters: {'kernel': ['rbf', 'poly', 'linear', 'sigmoid'], 'C': [0.1, 1, 10, 100, 1000, 10000, 100000]}
================================================================================
Training Class Count:
================================================================================
	Backdoor    1000
	Ransom      1000
	Trojan      1000
	Worm        1000
	Virus       1000
	PUA         1000
================================================================================
Testing Class Count:
================================================================================
	Worm        9000
	Virus       9000
	Trojan      9000
	Ransom      9000
	PUA         9000
	Backdoor    9000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 538.380975 seconds
================================================================================


================================================================================
Best Score: 0.8738333333333334
================================================================================
CV Results:
{'mean_fit_time': array([ 9.06092668, 10.2691468 ,  6.41211641, 10.56978321,  5.82370377,
        6.74989295, 10.81804407,  7.23859394,  4.81912756,  4.9805125 ,
       18.93875754,  6.41264844,  4.7375958 ,  4.81764841, 20.36276054,
        6.3368237 ,  4.72244096,  4.80868506, 22.83400285,  6.28701854,
        4.68470216,  4.77655125, 21.12037718,  6.33708644,  4.61725318,
        4.75517321, 19.74924052,  6.30540597]), 'std_fit_time': array([1.43218040e-02, 1.12187862e-03, 1.33903861e-01, 1.30790472e-01,
       3.10931206e-02, 7.31563568e-03, 2.17027307e-01, 2.13696361e-01,
       2.10394859e-02, 1.29139423e-03, 4.52786326e-01, 2.40320206e-01,
       3.63588333e-04, 1.75123215e-02, 3.54658604e-01, 2.20757008e-01,
       1.62050724e-02, 2.28917599e-02, 8.22600961e-01, 3.24523926e-01,
       6.52849674e-02, 5.57856560e-02, 1.26521981e+00, 3.79724979e-01,
       1.73264861e-01, 3.59442234e-02, 5.56894660e-01, 3.50476384e-01]), 'mean_score_time': array([6.92416358, 6.86343467, 4.21894777, 8.32568574, 5.03329909,
       4.90861225, 3.64727318, 7.2094363 , 4.20751894, 3.76984143,
       3.36205542, 6.99840474, 4.13689613, 3.48616624, 3.3647505 ,
       6.70929277, 4.13468885, 3.51648557, 3.36689758, 6.7894609 ,
       4.17104185, 3.51365554, 3.37811029, 6.69124711, 4.1392312 ,
       3.52327931, 3.37180817, 6.71444345]), 'std_score_time': array([0.06065822, 0.03950822, 0.0981797 , 0.11234021, 0.01650774,
       0.02359366, 0.07931483, 0.06008565, 0.00669086, 0.05100393,
       0.07436526, 0.01399016, 0.01288533, 0.02560997, 0.07242715,
       0.04643404, 0.02710462, 0.04366505, 0.08209372, 0.02402043,
       0.02053463, 0.03105295, 0.09989965, 0.04254854, 0.03939915,
       0.01656926, 0.08295786, 0.01818728]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 10, 10, 10, 10, 100,
                   100, 100, 100, 1000, 1000, 1000, 1000, 10000, 10000,
                   10000, 10000, 100000, 100000, 100000, 100000],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_kernel': masked_array(data=['rbf', 'poly', 'linear', 'sigmoid', 'rbf', 'poly',
                   'linear', 'sigmoid', 'rbf', 'poly', 'linear',
                   'sigmoid', 'rbf', 'poly', 'linear', 'sigmoid', 'rbf',
                   'poly', 'linear', 'sigmoid', 'rbf', 'poly', 'linear',
                   'sigmoid', 'rbf', 'poly', 'linear', 'sigmoid'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'kernel': 'rbf'}, {'C': 0.1, 'kernel': 'poly'}, {'C': 0.1, 'kernel': 'linear'}, {'C': 0.1, 'kernel': 'sigmoid'}, {'C': 1, 'kernel': 'rbf'}, {'C': 1, 'kernel': 'poly'}, {'C': 1, 'kernel': 'linear'}, {'C': 1, 'kernel': 'sigmoid'}, {'C': 10, 'kernel': 'rbf'}, {'C': 10, 'kernel': 'poly'}, {'C': 10, 'kernel': 'linear'}, {'C': 10, 'kernel': 'sigmoid'}, {'C': 100, 'kernel': 'rbf'}, {'C': 100, 'kernel': 'poly'}, {'C': 100, 'kernel': 'linear'}, {'C': 100, 'kernel': 'sigmoid'}, {'C': 1000, 'kernel': 'rbf'}, {'C': 1000, 'kernel': 'poly'}, {'C': 1000, 'kernel': 'linear'}, {'C': 1000, 'kernel': 'sigmoid'}, {'C': 10000, 'kernel': 'rbf'}, {'C': 10000, 'kernel': 'poly'}, {'C': 10000, 'kernel': 'linear'}, {'C': 10000, 'kernel': 'sigmoid'}, {'C': 100000, 'kernel': 'rbf'}, {'C': 100000, 'kernel': 'poly'}, {'C': 100000, 'kernel': 'linear'}, {'C': 100000, 'kernel': 'sigmoid'}], 'split0_test_score': array([0.66933333, 0.61633333, 0.77966667, 0.429     , 0.81033333,
       0.76733333, 0.78733333, 0.398     , 0.86733333, 0.85366667,
       0.77666667, 0.38466667, 0.87933333, 0.86033333, 0.77566667,
       0.36766667, 0.88      , 0.86166667, 0.77366667, 0.34966667,
       0.88033333, 0.86166667, 0.772     , 0.33033333, 0.879     ,
       0.861     , 0.76366667, 0.32966667]), 'split1_test_score': array([0.67      , 0.59566667, 0.77633333, 0.442     , 0.80433333,
       0.76633333, 0.77333333, 0.411     , 0.86266667, 0.82766667,
       0.77133333, 0.38366667, 0.86766667, 0.83633333, 0.76633333,
       0.37      , 0.86766667, 0.84133333, 0.76933333, 0.362     ,
       0.86433333, 0.84033333, 0.76833333, 0.36066667, 0.86      ,
       0.839     , 0.765     , 0.36      ]), 'mean_test_score': array([0.66966667, 0.606     , 0.778     , 0.4355    , 0.80733333,
       0.76683333, 0.78033333, 0.4045    , 0.865     , 0.84066667,
       0.774     , 0.38416667, 0.8735    , 0.84833333, 0.771     ,
       0.36883333, 0.87383333, 0.8515    , 0.7715    , 0.35583333,
       0.87233333, 0.851     , 0.77016667, 0.3455    , 0.8695    ,
       0.85      , 0.76433333, 0.34483333]), 'std_test_score': array([0.00033333, 0.01033333, 0.00166667, 0.0065    , 0.003     ,
       0.0005    , 0.007     , 0.0065    , 0.00233333, 0.013     ,
       0.00266667, 0.0005    , 0.00583333, 0.012     , 0.00466667,
       0.00116667, 0.00616667, 0.01016667, 0.00216667, 0.00616667,
       0.008     , 0.01066667, 0.00183333, 0.01516667, 0.0095    ,
       0.011     , 0.00066667, 0.01516667]), 'rank_test_score': array([20, 21, 13, 22, 11, 18, 12, 23,  5, 10, 14, 24,  2,  9, 16, 25,  1,
        6, 15, 26,  3,  7, 17, 27,  4,  8, 19, 28], dtype=int32), 'split0_train_score': array([0.67466667, 0.633     , 0.86833333, 0.42566667, 0.85566667,
       0.82066667, 0.95666667, 0.39166667, 0.96366667, 0.95066667,
       0.99566667, 0.388     , 0.997     , 0.998     , 0.99866667,
       0.36733333, 0.99866667, 0.99866667, 0.99866667, 0.35      ,
       0.99866667, 0.99866667, 0.99866667, 0.33033333, 0.99866667,
       0.99866667, 0.99766667, 0.32933333]), 'split1_train_score': array([0.68433333, 0.619     , 0.88633333, 0.45633333, 0.85166667,
       0.831     , 0.96066667, 0.41866667, 0.96566667, 0.95133333,
       0.99333333, 0.39333333, 0.99666667, 0.997     , 0.99733333,
       0.38033333, 0.99766667, 0.99766667, 0.998     , 0.37033333,
       0.998     , 0.998     , 0.99833333, 0.37      , 0.998     ,
       0.998     , 0.99866667, 0.37      ]), 'mean_train_score': array([0.6795    , 0.626     , 0.87733333, 0.441     , 0.85366667,
       0.82583333, 0.95866667, 0.40516667, 0.96466667, 0.951     ,
       0.9945    , 0.39066667, 0.99683333, 0.9975    , 0.998     ,
       0.37383333, 0.99816667, 0.99816667, 0.99833333, 0.36016667,
       0.99833333, 0.99833333, 0.9985    , 0.35016667, 0.99833333,
       0.99833333, 0.99816667, 0.34966667]), 'std_train_score': array([0.00483333, 0.007     , 0.009     , 0.01533333, 0.002     ,
       0.00516667, 0.002     , 0.0135    , 0.001     , 0.00033333,
       0.00116667, 0.00266667, 0.00016667, 0.0005    , 0.00066667,
       0.0065    , 0.0005    , 0.0005    , 0.00033333, 0.01016667,
       0.00033333, 0.00033333, 0.00016667, 0.01983333, 0.00033333,
       0.00033333, 0.0005    , 0.02033333])}
================================================================================
Params:
[{'C': 0.1, 'kernel': 'rbf'}, {'C': 0.1, 'kernel': 'poly'}, {'C': 0.1, 'kernel': 'linear'}, {'C': 0.1, 'kernel': 'sigmoid'}, {'C': 1, 'kernel': 'rbf'}, {'C': 1, 'kernel': 'poly'}, {'C': 1, 'kernel': 'linear'}, {'C': 1, 'kernel': 'sigmoid'}, {'C': 10, 'kernel': 'rbf'}, {'C': 10, 'kernel': 'poly'}, {'C': 10, 'kernel': 'linear'}, {'C': 10, 'kernel': 'sigmoid'}, {'C': 100, 'kernel': 'rbf'}, {'C': 100, 'kernel': 'poly'}, {'C': 100, 'kernel': 'linear'}, {'C': 100, 'kernel': 'sigmoid'}, {'C': 1000, 'kernel': 'rbf'}, {'C': 1000, 'kernel': 'poly'}, {'C': 1000, 'kernel': 'linear'}, {'C': 1000, 'kernel': 'sigmoid'}, {'C': 10000, 'kernel': 'rbf'}, {'C': 10000, 'kernel': 'poly'}, {'C': 10000, 'kernel': 'linear'}, {'C': 10000, 'kernel': 'sigmoid'}, {'C': 100000, 'kernel': 'rbf'}, {'C': 100000, 'kernel': 'poly'}, {'C': 100000, 'kernel': 'linear'}, {'C': 100000, 'kernel': 'sigmoid'}]
================================================================================
Mean Test Score: [0.66966667 0.606      0.778      0.4355     0.80733333 0.76683333
 0.78033333 0.4045     0.865      0.84066667 0.774      0.38416667
 0.8735     0.84833333 0.771      0.36883333 0.87383333 0.8515
 0.7715     0.35583333 0.87233333 0.851      0.77016667 0.3455
 0.8695     0.85       0.76433333 0.34483333]
================================================================================
Best Params: {'C': 1000, 'kernel': 'rbf'}
================================================================================



================================================================================
Command Line:
	train_classifier.py gridsearch rwe /mnt/data/RWE/ -gt adaboost -at dt -gc 2 -gp {"base_estimator__criterion":["gini", "entropy"], "base_estimator__splitter":["best", "random"], "algorithm":["SAMME", "SAMME.R"], "learning_rate":[1, 2, 5, 10], "n_estimators":[2, 5, 10, 50]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: rwe
	Window Size: 256
	Data points: 1,024
Number of features: 1,024
================================================================================


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: AdaBoost (adaboost)
Grid Search Parameters: {'base_estimator__criterion': ['gini', 'entropy'], 'base_estimator__splitter': ['best', 'random'], 'algorithm': ['SAMME', 'SAMME.R'], 'learning_rate': [1, 2, 5, 10], 'n_estimators': [2, 5, 10, 50]}
================================================================================
Training Class Count:
================================================================================
	Backdoor    10000
	Trojan      10000
	Ransom      10000
	Worm        10000
	Virus       10000
	PUA         10000
================================================================================
Testing Class Count:
================================================================================
	Backdoor    10000
	Trojan      10000
	Ransom      10000
	Worm        10000
	Virus       10000
	PUA         10000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 163184.994740 seconds
================================================================================


================================================================================
Best Score: 0.93755
================================================================================
CV Results:
{'mean_fit_time': array([8.08204274e+02, 1.67884941e+03, 3.71161980e+03, 2.03174833e+04,
       5.75083208e+02, 1.51272465e+03, 3.32824517e+03, 1.59629689e+04,
       5.16305126e+02, 9.94924975e+02, 1.11585084e+03, 2.61439366e+03,
       2.92020578e+02, 6.30314324e+02, 8.43808525e+02, 2.57649138e+03,
       1.60231862e+02, 3.40286117e+02, 6.68939323e+02, 2.86430125e+03,
       1.59314347e+02, 3.01648168e+02, 5.63714396e+02, 2.70687658e+03,
       1.01967978e+02, 1.72196851e+02, 3.21132185e+02, 1.28382503e+03,
       1.00900055e+02, 1.50503477e+02, 1.73127471e+02, 5.32370557e+02,
       1.66616295e+03, 4.11647836e+03, 8.38814118e+03, 1.35736237e+05,
       1.63781945e+03, 3.05704706e+03, 6.63669431e+03, 3.66288962e+04,
       1.00815353e+03, 1.77500410e+03, 1.49625828e+03, 1.51234739e+03,
       9.46756106e+02, 9.28375347e+02, 9.32024248e+02, 9.63664264e+02,
       1.32973172e+02, 3.32801605e+02, 6.62252574e+02, 3.25349238e+03,
       1.37161515e+02, 2.67878956e+02, 5.31704421e+02, 2.43654793e+03,
       8.15394423e+01, 1.40708289e+02, 1.36327408e+02, 1.63727700e+02,
       8.49736385e+01, 1.22246514e+02, 1.39046692e+02, 1.11806956e+02,
       7.79409543e+02, 1.82821540e+03, 3.36947596e+03, 1.74238643e+04,
       8.05428350e+02, 1.68046626e+03, 2.97878004e+03, 1.42389740e+04,
       7.85759455e+02, 2.03183363e+03, 2.05589497e+03, 5.00275326e+03,
       5.06541804e+02, 7.96581882e+02, 1.42308211e+03, 8.61678842e+03,
       1.60392821e+02, 3.67685997e+02, 7.11052800e+02, 3.20161677e+03,
       1.61477256e+02, 3.43258663e+02, 6.92112647e+02, 2.53302853e+03,
       1.53033424e+02, 1.15543671e+02, 4.03545507e+02, 1.02615856e+03,
       1.36641056e+02, 3.22501075e+02, 2.07593492e+02, 2.65895009e+02,
       1.63302890e+03, 3.98373102e+03, 8.48545583e+03, 4.61501852e+04,
       1.76357103e+03, 4.01748931e+03, 7.68996708e+03, 3.58780138e+04,
       1.70125547e+03, 3.61566416e+03, 7.09270733e+03, 1.88312001e+04,
       2.30185385e+03, 4.20742814e+03, 3.98201923e+03, 5.46171208e+03,
       1.40332532e+02, 3.32775717e+02, 6.55698609e+02, 3.07393737e+03,
       1.41473134e+02, 3.32211513e+02, 6.46496983e+02, 2.37423231e+03,
       1.52785660e+02, 2.42915451e+02, 4.26448315e+02, 9.83199924e+02,
       1.11789864e+02, 1.73225940e+02, 1.21807985e+02, 3.72903349e+02]), 'std_fit_time': array([2.64450467e+01, 4.41235712e+01, 6.26085385e+01, 1.21253009e+02,
       4.50634596e+01, 2.37305291e+01, 1.57540646e+02, 1.12209016e+02,
       5.03232956e-01, 1.78850710e+00, 5.63514529e+01, 1.51916871e+01,
       8.50426252e+01, 2.18551683e+00, 1.31328273e+00, 1.44972839e+01,
       6.57007539e+00, 1.16993225e+00, 4.06168020e+00, 1.22356070e+01,
       3.24275494e-01, 2.65686624e+01, 6.96103513e+00, 4.45287459e+01,
       6.67209578e+00, 3.81600666e+00, 1.09611097e+02, 7.17801078e+02,
       2.74557054e+00, 3.01668222e+01, 3.21130967e+00, 3.25907798e+01,
       8.20965803e+00, 5.74884443e+01, 6.79132817e+01, 6.76181431e+03,
       8.80308402e+00, 4.68276290e+01, 2.66073113e+02, 6.77247997e+02,
       3.06990039e+01, 6.47400248e+01, 4.64035239e+01, 4.28307954e+01,
       1.89376537e+01, 1.26514442e+01, 1.56218722e+01, 2.43837911e+01,
       3.95105255e+00, 6.72696114e-01, 4.95493507e+00, 1.03095762e+02,
       7.08377957e-01, 3.49558949e-01, 3.59971273e+00, 3.02328395e+01,
       1.12311316e+00, 4.69124901e+00, 3.14516485e+00, 4.67478037e+00,
       4.50621843e+00, 4.08218476e+01, 4.97599810e+01, 7.62261546e+00,
       9.53073597e+00, 1.24079158e+01, 5.50390017e+01, 3.52943324e+02,
       9.31836939e+00, 4.36937143e+01, 6.99184629e+01, 4.15496076e+01,
       1.39209974e+02, 7.66609685e+02, 5.44970320e+01, 2.49005340e+02,
       5.89940444e+01, 2.47762762e+02, 7.08945107e+02, 6.46734160e+03,
       2.75879610e+00, 6.03344011e+00, 2.27300559e+01, 3.56319119e+01,
       1.27048743e+00, 2.70936342e+01, 2.14656872e+01, 2.94278620e+01,
       7.12484610e+00, 4.09061376e+01, 2.11036167e+01, 3.08779340e+01,
       4.02279167e+01, 3.15698339e+01, 2.29652910e+01, 7.92125987e+01,
       2.36803674e+01, 2.71799350e+01, 9.34167004e+00, 1.20123337e+03,
       1.08057982e+01, 7.84126765e+01, 9.72418368e+01, 6.08697648e+02,
       4.21714213e+01, 5.28880941e+01, 1.63110021e+03, 4.79775365e+02,
       1.45987541e+03, 2.77041518e+03, 2.56339910e+03, 2.21358434e+03,
       1.88475037e+00, 5.08571923e+00, 1.41933985e+01, 5.70479671e+01,
       1.96242213e+00, 7.02445912e+00, 1.51338831e+01, 8.80099956e+01,
       1.90718126e+00, 2.99241271e+01, 2.47077988e+01, 3.69182653e+01,
       3.33434532e+01, 9.37127912e+01, 7.49870692e+01, 4.08841190e+01]), 'mean_score_time': array([ 1.05005181,  2.79551291,  4.46826458, 17.7558074 ,  1.78213012,
        2.60497189,  4.25944173, 16.74245524,  1.71683085,  2.46478462,
        2.12930048, 13.10151136,  1.65855789,  2.32359362,  3.35804451,
       12.61203313,  1.43698859,  2.83168709,  4.72956026, 19.22378814,
        1.77726912,  2.89642823,  0.77003694, 18.59863555,  1.6830678 ,
        2.46072495,  3.86110413, 13.47346222,  1.63425195,  2.4277277 ,
        3.49699712, 13.05057311,  1.71946466,  2.6597867 ,  4.25715232,
        7.77426624,  1.73479879,  3.11478519,  4.11559749, 17.34189832,
        1.61380088,  2.32788849,  3.63676   , 12.83039665,  1.63551307,
        2.38613367,  3.27368069, 12.84686697,  1.71532035,  2.73709488,
        4.60391057, 18.06568491,  1.74285758,  2.54771018,  4.26853025,
       17.59553659,  1.59929252,  2.44739044,  3.48988545, 12.17751241,
        1.8085115 ,  2.27494586,  3.67917383, 12.46116865,  1.81309867,
        3.02847302,  4.93623471, 22.62133801,  1.87673986,  2.95438051,
        4.86336815, 21.7322129 ,  1.81338465,  3.10822189,  2.7773366 ,
       18.51492453,  0.30112624,  2.78610885,  4.36308801,  9.68612468,
        1.95568037,  3.16133535,  5.39151812, 23.68649471,  1.93824613,
        3.21072447,  5.33207226, 22.79202628,  1.95136333,  1.73283136,
        4.78533471, 18.24471533,  1.68367517,  2.6906929 ,  4.29574168,
       17.04816639,  1.60300052,  3.02216887,  5.03198874, 23.19261837,
        1.8356607 ,  2.99053454,  5.00385177, 21.91474223,  1.26407743,
        2.70826495,  5.06347227, 19.62855792,  1.79487121,  2.90106392,
        4.5152216 , 12.22703946,  1.91135013,  3.12679482,  5.07869375,
       23.09621227,  1.99451673,  3.15191746,  5.33815718, 12.5220654 ,
        1.97771692,  2.94623327,  5.94096196, 19.14282131,  1.81976557,
        1.77735937,  4.44393802, 21.93750727]), 'std_score_time': array([7.40845799e-01, 2.65235901e-02, 4.02362347e-02, 3.18121910e-03,
       1.02225542e-02, 2.89149284e-02, 6.11473322e-02, 4.21268702e-01,
       6.18902445e-02, 6.70907497e-02, 1.55051219e+00, 6.44496322e-01,
       5.40661812e-03, 3.86185646e-02, 1.49244070e-02, 1.55873299e-02,
       9.56356525e-02, 4.39447165e-02, 5.04413843e-02, 7.25041270e-01,
       2.81901360e-02, 1.04582906e-01, 4.39991951e-02, 6.37986541e-01,
       1.92146301e-02, 3.77570391e-02, 1.99799657e-01, 1.36596382e+00,
       7.71081448e-03, 1.28429890e-01, 1.72212124e-02, 6.04383469e-01,
       5.96338511e-02, 1.09832287e-02, 3.93047333e-02, 4.48629379e-01,
       1.10732198e-01, 5.22968769e-01, 1.03321075e-02, 1.10644937e-01,
       2.56625414e-02, 1.86598301e-02, 1.37362957e-01, 3.57332230e-02,
       2.04353333e-02, 8.70850086e-02, 1.25812054e-01, 6.09345555e-01,
       2.38442421e-02, 6.38515949e-02, 1.06559396e-01, 5.32079935e-02,
       3.18801403e-03, 1.71758652e-01, 1.05644584e-01, 3.40674520e-01,
       2.69351006e-02, 2.36159563e-02, 4.03479338e-02, 2.40494251e-01,
       1.82457685e-01, 1.14774346e-01, 3.26980352e-02, 4.20338511e-01,
       1.80501938e-02, 9.43958759e-03, 4.99608517e-02, 2.43453383e-01,
       1.42337084e-02, 6.67603016e-02, 1.18855119e-01, 1.32387519e-01,
       1.68330789e-01, 1.24551415e-01, 1.92010498e+00, 2.25402594e-01,
       5.82623482e-03, 1.39101148e-01, 7.26805925e-02, 6.83128011e+00,
       2.14564800e-02, 2.48658657e-03, 4.41899300e-02, 3.68320942e-03,
       1.26096010e-02, 1.65041685e-02, 2.45051384e-02, 8.80671024e-01,
       3.51774693e-02, 1.23452032e+00, 1.01249576e-01, 3.95082593e-01,
       3.21977496e-01, 1.92418814e-01, 3.47293615e-02, 6.34419084e-01,
       2.75252461e-01, 7.27057457e-03, 1.21220946e-01, 2.50346184e-01,
       7.82799721e-03, 2.05135345e-03, 1.34567142e-01, 4.49123383e-01,
       9.54629183e-01, 2.49802709e-01, 2.99587488e-01, 7.65781164e-01,
       9.73652601e-02, 1.75719500e-01, 2.21171856e-01, 4.47900212e+00,
       3.95129919e-02, 7.54075050e-02, 4.51786160e-01, 3.43623757e-01,
       7.79093504e-02, 9.96065140e-02, 1.05021477e-01, 1.71019745e+00,
       1.26734734e-01, 2.27754116e-02, 2.61196733e-01, 7.13323116e-01,
       5.32419682e-02, 1.30286038e+00, 8.58020782e-03, 8.78192055e+00]), 'param_algorithm': masked_array(data=['SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R', 'SAMME.R',
                   'SAMME.R', 'SAMME.R', 'SAMME.R'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_base_estimator__criterion': masked_array(data=['gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_base_estimator__splitter': masked_array(data=['best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random',
                   'random', 'random', 'random', 'random', 'random'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[1, 1, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1,
                   1, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1,
                   1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1,
                   1, 2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1,
                   2, 2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2,
                   2, 2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2, 2,
                   2, 2, 5, 5, 5, 5, 10, 10, 10, 10, 1, 1, 1, 1, 2, 2, 2,
                   2, 5, 5, 5, 5, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50,
                   2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50, 2, 5, 10, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}], 'split0_test_score': array([0.88563333, 0.91766667, 0.91983333, 0.92753333, 0.88586667,
       0.8875    , 0.9008    , 0.91683333, 0.18886667, 0.16666667,
       0.16666667, 0.16666667, 0.18806667, 0.16666667, 0.16666667,
       0.16666667, 0.8813    , 0.91563333, 0.92696667, 0.93303333,
       0.88583333, 0.90956667, 0.9047    , 0.9205    , 0.88993333,
       0.88693333, 0.40243333, 0.58976667, 0.89266667, 0.72986667,
       0.16666667, 0.16666667, 0.88756667, 0.92036667, 0.92783333,
       0.93366667, 0.89113333, 0.8991    , 0.90583333, 0.91646667,
       0.14076667, 0.16666667, 0.16666667, 0.16666667, 0.1405    ,
       0.16666667, 0.16666667, 0.16666667, 0.8848    , 0.91833333,
       0.92436667, 0.93496667, 0.88586667, 0.86243333, 0.91146667,
       0.92126667, 0.17053333, 0.16666667, 0.16666667, 0.16666667,
       0.89886667, 0.17746667, 0.16666667, 0.16666667, 0.89356667,
       0.90163333, 0.91933333, 0.92823333, 0.89343333, 0.9109    ,
       0.9137    , 0.9136    , 0.89033333, 0.8847    , 0.78183333,
       0.5167    , 0.89673333, 0.57043333, 0.74136667, 0.58003333,
       0.89026667, 0.9195    , 0.92656667, 0.9302    , 0.8915    ,
       0.9092    , 0.91613333, 0.91953333, 0.88766667, 0.83063333,
       0.819     , 0.57153333, 0.88086667, 0.88846667, 0.7828    ,
       0.5912    , 0.8998    , 0.9157    , 0.9233    , 0.92906667,
       0.89926667, 0.91746667, 0.9201    , 0.922     , 0.8986    ,
       0.89583333, 0.89693333, 0.71436667, 0.88746667, 0.81453333,
       0.72716667, 0.44736667, 0.89093333, 0.91943333, 0.92793333,
       0.9285    , 0.89506667, 0.91453333, 0.92206667, 0.9185    ,
       0.8886    , 0.8256    , 0.88243333, 0.60013333, 0.88746667,
       0.86593333, 0.67836667, 0.69766667]), 'split1_test_score': array([0.90716667, 0.9287    , 0.9278    , 0.9338    , 0.9052    ,
       0.91353333, 0.92273333, 0.92403333, 0.18743333, 0.16666667,
       0.16666667, 0.16666667, 0.1922    , 0.16666667, 0.16666667,
       0.16666667, 0.899     , 0.9265    , 0.93273333, 0.94006667,
       0.89056667, 0.9107    , 0.91876667, 0.9262    , 0.17203333,
       0.16666667, 0.16666667, 0.16666667, 0.1917    , 0.16666667,
       0.16666667, 0.16666667, 0.90766667, 0.93153333, 0.93426667,
       0.93866667, 0.91306667, 0.8584    , 0.9104    , 0.9201    ,
       0.175     , 0.16666667, 0.16666667, 0.16666667, 0.1862    ,
       0.16666667, 0.16666667, 0.16666667, 0.90483333, 0.92896667,
       0.93403333, 0.94013333, 0.90343333, 0.909     , 0.91416667,
       0.92646667, 0.19766667, 0.16666667, 0.16666667, 0.16666667,
       0.19813333, 0.16666667, 0.16666667, 0.16666667, 0.90603333,
       0.91646667, 0.92916667, 0.9296    , 0.90253333, 0.92576667,
       0.9209    , 0.92173333, 0.90243333, 0.88686667, 0.7728    ,
       0.58583333, 0.9058    , 0.9064    , 0.7523    , 0.55153333,
       0.9083    , 0.93106667, 0.9329    , 0.93163333, 0.9034    ,
       0.92643333, 0.92123333, 0.9242    , 0.898     , 0.78066667,
       0.81133333, 0.59576667, 0.904     , 0.89143333, 0.64353333,
       0.57763333, 0.9152    , 0.9267    , 0.93433333, 0.933     ,
       0.91086667, 0.92493333, 0.92673333, 0.9258    , 0.90623333,
       0.87353333, 0.81186667, 0.64773333, 0.9117    , 0.91023333,
       0.75836667, 0.2682    , 0.9035    , 0.93096667, 0.93603333,
       0.9355    , 0.90563333, 0.92526667, 0.9269    , 0.92543333,
       0.90013333, 0.7791    , 0.77653333, 0.62853333, 0.9043    ,
       0.88796667, 0.78506667, 0.38646667]), 'mean_test_score': array([0.8964    , 0.92318333, 0.92381667, 0.93066667, 0.89553333,
       0.90051667, 0.91176667, 0.92043333, 0.18815   , 0.16666667,
       0.16666667, 0.16666667, 0.19013333, 0.16666667, 0.16666667,
       0.16666667, 0.89015   , 0.92106667, 0.92985   , 0.93655   ,
       0.8882    , 0.91013333, 0.91173333, 0.92335   , 0.53098333,
       0.5268    , 0.28455   , 0.37821667, 0.54218333, 0.44826667,
       0.16666667, 0.16666667, 0.89761667, 0.92595   , 0.93105   ,
       0.93616667, 0.9021    , 0.87875   , 0.90811667, 0.91828333,
       0.15788333, 0.16666667, 0.16666667, 0.16666667, 0.16335   ,
       0.16666667, 0.16666667, 0.16666667, 0.89481667, 0.92365   ,
       0.9292    , 0.93755   , 0.89465   , 0.88571667, 0.91281667,
       0.92386667, 0.1841    , 0.16666667, 0.16666667, 0.16666667,
       0.5485    , 0.17206667, 0.16666667, 0.16666667, 0.8998    ,
       0.90905   , 0.92425   , 0.92891667, 0.89798333, 0.91833333,
       0.9173    , 0.91766667, 0.89638333, 0.88578333, 0.77731667,
       0.55126667, 0.90126667, 0.73841667, 0.74683333, 0.56578333,
       0.89928333, 0.92528333, 0.92973333, 0.93091667, 0.89745   ,
       0.91781667, 0.91868333, 0.92186667, 0.89283333, 0.80565   ,
       0.81516667, 0.58365   , 0.89243333, 0.88995   , 0.71316667,
       0.58441667, 0.9075    , 0.9212    , 0.92881667, 0.93103333,
       0.90506667, 0.9212    , 0.92341667, 0.9239    , 0.90241667,
       0.88468333, 0.8544    , 0.68105   , 0.89958333, 0.86238333,
       0.74276667, 0.35778333, 0.89721667, 0.9252    , 0.93198333,
       0.932     , 0.90035   , 0.9199    , 0.92448333, 0.92196667,
       0.89436667, 0.80235   , 0.82948333, 0.61433333, 0.89588333,
       0.87695   , 0.73171667, 0.54206667]), 'std_test_score': array([0.01076667, 0.00551667, 0.00398333, 0.00313333, 0.00966667,
       0.01301667, 0.01096667, 0.0036    , 0.00071667, 0.        ,
       0.        , 0.        , 0.00206667, 0.        , 0.        ,
       0.        , 0.00885   , 0.00543333, 0.00288333, 0.00351667,
       0.00236667, 0.00056667, 0.00703333, 0.00285   , 0.35895   ,
       0.36013333, 0.11788333, 0.21155   , 0.35048333, 0.2816    ,
       0.        , 0.        , 0.01005   , 0.00558333, 0.00321667,
       0.0025    , 0.01096667, 0.02035   , 0.00228333, 0.00181667,
       0.01711667, 0.        , 0.        , 0.        , 0.02285   ,
       0.        , 0.        , 0.        , 0.01001667, 0.00531667,
       0.00483333, 0.00258333, 0.00878333, 0.02328333, 0.00135   ,
       0.0026    , 0.01356667, 0.        , 0.        , 0.        ,
       0.35036667, 0.0054    , 0.        , 0.        , 0.00623333,
       0.00741667, 0.00491667, 0.00068333, 0.00455   , 0.00743333,
       0.0036    , 0.00406667, 0.00605   , 0.00108333, 0.00451667,
       0.03456667, 0.00453333, 0.16798333, 0.00546667, 0.01425   ,
       0.00901667, 0.00578333, 0.00316667, 0.00071667, 0.00595   ,
       0.00861667, 0.00255   , 0.00233333, 0.00516667, 0.02498333,
       0.00383333, 0.01211667, 0.01156667, 0.00148333, 0.06963333,
       0.00678333, 0.0077    , 0.0055    , 0.00551667, 0.00196667,
       0.0058    , 0.00373333, 0.00331667, 0.0019    , 0.00381667,
       0.01115   , 0.04253333, 0.03331667, 0.01211667, 0.04785   ,
       0.0156    , 0.08958333, 0.00628333, 0.00576667, 0.00405   ,
       0.0035    , 0.00528333, 0.00536667, 0.00241667, 0.00346667,
       0.00576667, 0.02325   , 0.05295   , 0.0142    , 0.00841667,
       0.01101667, 0.05335   , 0.1556    ]), 'rank_test_score': array([ 60,  26,  22,   9,  63,  51,  41,  32, 105, 108, 108, 108, 104,
       108, 108, 108,  69,  31,  10,   2,  71,  43,  42,  25,  98,  99,
       103, 101,  96, 100, 108, 108,  57,  15,   6,   3,  49,  75,  45,
        36, 128, 108, 108, 108, 127, 108, 108, 108,  64,  23,  12,   1,
        65,  73,  40,  21, 106, 108, 108, 108,  95, 107, 108, 108,  53,
        44,  19,  13,  56,  35,  39,  38,  61,  72,  83,  94,  50,  86,
        84,  93,  55,  16,  11,   8,  58,  37,  34,  28,  67,  81,  80,
        92,  68,  70,  88,  91,  46,  29,  14,   7,  47,  29,  24,  20,
        48,  74,  78,  89,  54,  77,  85, 102,  59,  17,   5,   4,  52,
        33,  18,  27,  66,  82,  79,  90,  62,  76,  87,  97], dtype=int32), 'split0_train_score': array([0.9979    , 0.99916667, 0.9979    , 0.9979    , 0.9979    ,
       0.99916667, 0.99916667, 0.9983    , 0.19043333, 0.16666667,
       0.16666667, 0.16666667, 0.18943333, 0.16666667, 0.16666667,
       0.16666667, 0.9979    , 0.99916667, 0.9979    , 0.99796667,
       0.99786667, 0.9984    , 0.99706667, 0.99886667, 0.99916667,
       0.99133333, 0.43813333, 0.6263    , 0.99916667, 0.79403333,
       0.16666667, 0.16666667, 0.9979    , 0.99916667, 0.9979    ,
       0.9979    , 0.9979    , 0.99916667, 0.9979    , 0.99826667,
       0.14026667, 0.16666667, 0.16666667, 0.16666667, 0.1414    ,
       0.16666667, 0.16666667, 0.16666667, 0.9979    , 0.99916667,
       0.9979    , 0.9979    , 0.9979    , 0.97996667, 0.9979    ,
       0.9983    , 0.1718    , 0.16666667, 0.16666667, 0.16666667,
       0.99916667, 0.17786667, 0.16666667, 0.16666667, 0.99916667,
       0.99916667, 0.99916667, 0.99883333, 0.99903333, 0.99906667,
       0.99893333, 0.9988    , 0.9979    , 0.98626667, 0.87193333,
       0.5496    , 0.9979    , 0.63603333, 0.83213333, 0.64316667,
       0.99916667, 0.99916667, 0.99916667, 0.999     , 0.99903333,
       0.99863333, 0.99893333, 0.99853333, 0.9979    , 0.93486667,
       0.90686667, 0.6196    , 0.99793333, 0.998     , 0.8751    ,
       0.6526    , 0.99916667, 0.99916667, 0.99916667, 0.99916667,
       0.99903333, 0.99916667, 0.99876667, 0.99886667, 0.9979    ,
       0.99406667, 0.99463333, 0.77113333, 0.9979    , 0.91693333,
       0.81496667, 0.48346667, 0.99916667, 0.99916667, 0.99916667,
       0.99916667, 0.99903333, 0.99916667, 0.99886667, 0.99876667,
       0.9979    , 0.90996667, 0.98473333, 0.6483    , 0.9979    ,
       0.97496667, 0.75683333, 0.76863333]), 'split1_train_score': array([0.9962    , 0.999     , 0.99793333, 0.99793333, 0.99616667,
       0.999     , 0.99886667, 0.99686667, 0.18653333, 0.16666667,
       0.16666667, 0.16666667, 0.18666667, 0.16666667, 0.16666667,
       0.16666667, 0.9962    , 0.999     , 0.99793333, 0.99793333,
       0.99153333, 0.999     , 0.9989    , 0.99823333, 0.16996667,
       0.16666667, 0.16666667, 0.16666667, 0.18533333, 0.16666667,
       0.16666667, 0.16666667, 0.9962    , 0.999     , 0.99793333,
       0.99793333, 0.9962    , 0.9383    , 0.9962    , 0.99643333,
       0.17376667, 0.16666667, 0.16666667, 0.16666667, 0.1853    ,
       0.16666667, 0.16666667, 0.16666667, 0.9962    , 0.999     ,
       0.99793333, 0.99793333, 0.9962    , 0.999     , 0.9962    ,
       0.9985    , 0.1991    , 0.16666667, 0.16666667, 0.16666667,
       0.19306667, 0.16666667, 0.16666667, 0.16666667, 0.999     ,
       0.999     , 0.999     , 0.99706667, 0.99726667, 0.9986    ,
       0.9967    , 0.9981    , 0.9962    , 0.97446667, 0.8492    ,
       0.64876667, 0.9962    , 0.99496667, 0.8299    , 0.597     ,
       0.999     , 0.999     , 0.999     , 0.99843333, 0.99726667,
       0.9983    , 0.997     , 0.9968    , 0.9962    , 0.86266667,
       0.89376667, 0.63976667, 0.9962    , 0.9824    , 0.7207    ,
       0.6335    , 0.999     , 0.999     , 0.999     , 0.999     ,
       0.99726667, 0.999     , 0.99696667, 0.99876667, 0.9962    ,
       0.95773333, 0.8978    , 0.71263333, 0.9962    , 0.9929    ,
       0.83246667, 0.27706667, 0.999     , 0.999     , 0.999     ,
       0.999     , 0.99726667, 0.99893333, 0.9987    , 0.9965    ,
       0.9962    , 0.85186667, 0.8695    , 0.67583333, 0.9962    ,
       0.97736667, 0.83713333, 0.4147    ]), 'mean_train_score': array([0.99705   , 0.99908333, 0.99791667, 0.99791667, 0.99703333,
       0.99908333, 0.99901667, 0.99758333, 0.18848333, 0.16666667,
       0.16666667, 0.16666667, 0.18805   , 0.16666667, 0.16666667,
       0.16666667, 0.99705   , 0.99908333, 0.99791667, 0.99795   ,
       0.9947    , 0.9987    , 0.99798333, 0.99855   , 0.58456667,
       0.579     , 0.3024    , 0.39648333, 0.59225   , 0.48035   ,
       0.16666667, 0.16666667, 0.99705   , 0.99908333, 0.99791667,
       0.99791667, 0.99705   , 0.96873333, 0.99705   , 0.99735   ,
       0.15701667, 0.16666667, 0.16666667, 0.16666667, 0.16335   ,
       0.16666667, 0.16666667, 0.16666667, 0.99705   , 0.99908333,
       0.99791667, 0.99791667, 0.99705   , 0.98948333, 0.99705   ,
       0.9984    , 0.18545   , 0.16666667, 0.16666667, 0.16666667,
       0.59611667, 0.17226667, 0.16666667, 0.16666667, 0.99908333,
       0.99908333, 0.99908333, 0.99795   , 0.99815   , 0.99883333,
       0.99781667, 0.99845   , 0.99705   , 0.98036667, 0.86056667,
       0.59918333, 0.99705   , 0.8155    , 0.83101667, 0.62008333,
       0.99908333, 0.99908333, 0.99908333, 0.99871667, 0.99815   ,
       0.99846667, 0.99796667, 0.99766667, 0.99705   , 0.89876667,
       0.90031667, 0.62968333, 0.99706667, 0.9902    , 0.7979    ,
       0.64305   , 0.99908333, 0.99908333, 0.99908333, 0.99908333,
       0.99815   , 0.99908333, 0.99786667, 0.99881667, 0.99705   ,
       0.9759    , 0.94621667, 0.74188333, 0.99705   , 0.95491667,
       0.82371667, 0.38026667, 0.99908333, 0.99908333, 0.99908333,
       0.99908333, 0.99815   , 0.99905   , 0.99878333, 0.99763333,
       0.99705   , 0.88091667, 0.92711667, 0.66206667, 0.99705   ,
       0.97616667, 0.79698333, 0.59166667]), 'std_train_score': array([8.50000000e-04, 8.33333333e-05, 1.66666667e-05, 1.66666667e-05,
       8.66666667e-04, 8.33333333e-05, 1.50000000e-04, 7.16666667e-04,
       1.95000000e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.38333333e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       8.50000000e-04, 8.33333333e-05, 1.66666667e-05, 1.66666667e-05,
       3.16666667e-03, 3.00000000e-04, 9.16666667e-04, 3.16666667e-04,
       4.14600000e-01, 4.12333333e-01, 1.35733333e-01, 2.29816667e-01,
       4.06916667e-01, 3.13683333e-01, 0.00000000e+00, 0.00000000e+00,
       8.50000000e-04, 8.33333333e-05, 1.66666667e-05, 1.66666667e-05,
       8.50000000e-04, 3.04333333e-02, 8.50000000e-04, 9.16666667e-04,
       1.67500000e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.19500000e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       8.50000000e-04, 8.33333333e-05, 1.66666667e-05, 1.66666667e-05,
       8.50000000e-04, 9.51666667e-03, 8.50000000e-04, 1.00000000e-04,
       1.36500000e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.03050000e-01, 5.60000000e-03, 0.00000000e+00, 0.00000000e+00,
       8.33333333e-05, 8.33333333e-05, 8.33333333e-05, 8.83333333e-04,
       8.83333333e-04, 2.33333333e-04, 1.11666667e-03, 3.50000000e-04,
       8.50000000e-04, 5.90000000e-03, 1.13666667e-02, 4.95833333e-02,
       8.50000000e-04, 1.79466667e-01, 1.11666667e-03, 2.30833333e-02,
       8.33333333e-05, 8.33333333e-05, 8.33333333e-05, 2.83333333e-04,
       8.83333333e-04, 1.66666667e-04, 9.66666667e-04, 8.66666667e-04,
       8.50000000e-04, 3.61000000e-02, 6.55000000e-03, 1.00833333e-02,
       8.66666667e-04, 7.80000000e-03, 7.72000000e-02, 9.55000000e-03,
       8.33333333e-05, 8.33333333e-05, 8.33333333e-05, 8.33333333e-05,
       8.83333333e-04, 8.33333333e-05, 9.00000000e-04, 5.00000000e-05,
       8.50000000e-04, 1.81666667e-02, 4.84166667e-02, 2.92500000e-02,
       8.50000000e-04, 3.79833333e-02, 8.75000000e-03, 1.03200000e-01,
       8.33333333e-05, 8.33333333e-05, 8.33333333e-05, 8.33333333e-05,
       8.83333333e-04, 1.16666667e-04, 8.33333333e-05, 1.13333333e-03,
       8.50000000e-04, 2.90500000e-02, 5.76166667e-02, 1.37666667e-02,
       8.50000000e-04, 1.20000000e-03, 4.01500000e-02, 1.76966667e-01])}
================================================================================
Params:
[{'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'learning_rate': 10, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 2, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 5, 'n_estimators': 50}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 2}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 5}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 10}, {'algorithm': 'SAMME.R', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 10, 'n_estimators': 50}]
================================================================================
Mean Test Score: [0.8964     0.92318333 0.92381667 0.93066667 0.89553333 0.90051667
 0.91176667 0.92043333 0.18815    0.16666667 0.16666667 0.16666667
 0.19013333 0.16666667 0.16666667 0.16666667 0.89015    0.92106667
 0.92985    0.93655    0.8882     0.91013333 0.91173333 0.92335
 0.53098333 0.5268     0.28455    0.37821667 0.54218333 0.44826667
 0.16666667 0.16666667 0.89761667 0.92595    0.93105    0.93616667
 0.9021     0.87875    0.90811667 0.91828333 0.15788333 0.16666667
 0.16666667 0.16666667 0.16335    0.16666667 0.16666667 0.16666667
 0.89481667 0.92365    0.9292     0.93755    0.89465    0.88571667
 0.91281667 0.92386667 0.1841     0.16666667 0.16666667 0.16666667
 0.5485     0.17206667 0.16666667 0.16666667 0.8998     0.90905
 0.92425    0.92891667 0.89798333 0.91833333 0.9173     0.91766667
 0.89638333 0.88578333 0.77731667 0.55126667 0.90126667 0.73841667
 0.74683333 0.56578333 0.89928333 0.92528333 0.92973333 0.93091667
 0.89745    0.91781667 0.91868333 0.92186667 0.89283333 0.80565
 0.81516667 0.58365    0.89243333 0.88995    0.71316667 0.58441667
 0.9075     0.9212     0.92881667 0.93103333 0.90506667 0.9212
 0.92341667 0.9239     0.90241667 0.88468333 0.8544     0.68105
 0.89958333 0.86238333 0.74276667 0.35778333 0.89721667 0.9252
 0.93198333 0.932      0.90035    0.9199     0.92448333 0.92196667
 0.89436667 0.80235    0.82948333 0.61433333 0.89588333 0.87695
 0.73171667 0.54206667]
================================================================================
Best Params: {'algorithm': 'SAMME', 'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'learning_rate': 1, 'n_estimators': 50}
================================================================================



================================================================================
Command Line:
	train_classifier.py gridsearch gist /mnt/data/GIST/ -gt adaboost -at dt -gc 2 -gj 15 -gp {"n_estimators":[10, 25, 50], "learning_rate":[1, 0.9, 0.5, 0.3, 0.1, 0.01, 0.001], "base_estimator__criterion":["gini", "entropy"], "base_estimator__splitter":["best"], "algorithm":["SAMME"]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: gist
Number of features: 320
================================================================================
/usr/local/lib/python3.5/dist-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.
  if diff:
/usr/local/lib/python3.5/dist-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.
  if diff:


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: AdaBoost (adaboost)
Grid Search Parameters: {'base_estimator__splitter': ['best'], 'learning_rate': [1, 0.9, 0.5, 0.3, 0.1, 0.01, 0.001], 'base_estimator__criterion': ['gini', 'entropy'], 'algorithm': ['SAMME'], 'n_estimators': [10, 25, 50]}
================================================================================
AdaBoost Enabled!
AdaBoost Type: Decision Tree (dt)
================================================================================
Training Class Count:
================================================================================
	Ransom      10000
	Backdoor    10000
	Worm        10000
	Trojan      10000
	PUA         10000
	Virus       10000
================================================================================
Testing Class Count:
================================================================================
	Ransom      10000
	Backdoor    10000
	Worm        10000
	Trojan      10000
	PUA         10000
	Virus       10000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 108856.370136 seconds
================================================================================


================================================================================
Best Score: 0.9227166666666666
================================================================================
CV Results:
{'param_base_estimator__splitter': masked_array(data=['best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best',
                   'best', 'best', 'best', 'best', 'best', 'best', 'best'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'split0_test_score': array([0.9037    , 0.9126    , 0.91563333, 0.90726667, 0.90906667,
       0.91613333, 0.90813333, 0.9122    , 0.9101    , 0.9081    ,
       0.9155    , 0.91766667, 0.89      , 0.90513333, 0.9126    ,
       0.8808    , 0.88306667, 0.88576667, 0.87993333, 0.88143333,
       0.8815    , 0.9099    , 0.9163    , 0.9174    , 0.9091    ,
       0.91063333, 0.91713333, 0.90983333, 0.91843333, 0.91673333,
       0.90253333, 0.91396667, 0.91823333, 0.89463333, 0.90453333,
       0.9103    , 0.8818    , 0.88923333, 0.89206667, 0.88206667,
       0.883     , 0.8828    ]), 'std_test_score': array([0.00611667, 0.00461667, 0.00555   , 0.00463333, 0.00508333,
       0.00481667, 0.00421667, 0.00611667, 0.00536667, 0.00295   ,
       0.00401667, 0.00433333, 0.00433333, 0.003     , 0.00431667,
       0.00523333, 0.00561667, 0.00471667, 0.00505   , 0.00463333,
       0.00503333, 0.00406667, 0.0038    , 0.00531667, 0.00465   ,
       0.00548333, 0.00416667, 0.00476667, 0.00208333, 0.00173333,
       0.00556667, 0.00463333, 0.00183333, 0.00188333, 0.00483333,
       0.00651667, 0.00553333, 0.00345   , 0.00121667, 0.00543333,
       0.00555   , 0.0053    ]), 'param_base_estimator__criterion': masked_array(data=['gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',
                   'entropy'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'split1_train_score': array([0.999     , 0.99916667, 0.999     , 0.999     , 0.99916667,
       0.999     , 0.999     , 0.99916667, 0.999     , 0.99916667,
       0.99916667, 0.99906667, 0.99916667, 0.99916667, 0.99916667,
       0.99916667, 0.99916667, 0.99916667, 0.99916667, 0.99916667,
       0.99916667, 0.999     , 0.99916667, 0.999     , 0.999     ,
       0.99916667, 0.999     , 0.999     , 0.99916667, 0.999     ,
       0.99916667, 0.99916667, 0.99906667, 0.99916667, 0.99916667,
       0.99916667, 0.99916667, 0.99916667, 0.99916667, 0.99916667,
       0.99916667, 0.99916667]), 'rank_test_score': array([25, 13,  4, 23, 19,  5, 22, 12, 17, 24,  9,  2, 30, 27, 14, 41, 34,
       33, 42, 40, 39, 20,  7,  1, 21, 16,  3, 18,  6, 11, 28, 10,  8, 29,
       26, 15, 38, 32, 31, 37, 35, 36], dtype=int32), 'mean_fit_time': array([  359.28284597,   860.81657743,  1866.2655493 ,   347.63827562,
         866.77530122,  1828.29441833,   358.02876246,   909.47169983,
        1832.92879391,   364.22183871,   892.79337633,  1753.34045208,
         365.69358385,   902.29528964,  1788.46352589,   361.79783678,
         905.86645615,  1795.5353539 ,   361.52684319,   898.96437657,
        1780.42565382,  1015.09019995,  2458.92212605, 10013.14073384,
        1003.28464413,  2517.00369895, 28100.19464612,   939.69589591,
        2440.50726676,  5031.97870624,   915.94212925,  2354.37366509,
        4787.61538506,   934.83187342,  2298.92039156,  4424.51828969,
         939.20939398,  2336.97604442,  3559.80997896,   936.67976737,
        1784.28669381,  2473.20916235]), 'std_score_time': array([2.72470713e-02, 1.09077096e-01, 4.46974039e-02, 4.14383411e-03,
       4.30512428e-03, 3.51992846e-02, 4.01892662e-02, 1.56480074e-02,
       8.52397680e-02, 1.23465061e-03, 7.09254742e-02, 1.30443573e-01,
       3.33528519e-02, 9.12517309e-02, 7.99410343e-02, 1.56185627e-02,
       6.83579445e-02, 1.91296339e-02, 7.47636557e-02, 6.92968369e-02,
       6.21098280e-02, 3.09240818e-03, 1.56974792e-02, 6.27530813e-02,
       1.83588266e-02, 4.59179878e-02, 1.05513418e+00, 6.88654184e-02,
       2.72583961e-03, 1.89100504e-02, 8.53037834e-03, 9.34422016e-02,
       3.20935249e-03, 6.40770197e-02, 1.03254318e-02, 6.29485846e-02,
       1.00158453e-02, 6.91928864e-02, 9.68894958e-02, 3.11655998e-02,
       3.17060947e-03, 3.43322754e-04]), 'param_n_estimators': masked_array(data=[10, 25, 50, 10, 25, 50, 10, 25, 50, 10, 25, 50, 10, 25,
                   50, 10, 25, 50, 10, 25, 50, 10, 25, 50, 10, 25, 50, 10,
                   25, 50, 10, 25, 50, 10, 25, 50, 10, 25, 50, 10, 25, 50],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [{'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 50}], 'param_learning_rate': masked_array(data=[1, 1, 1, 0.9, 0.9, 0.9, 0.5, 0.5, 0.5, 0.3, 0.3, 0.3,
                   0.1, 0.1, 0.1, 0.01, 0.01, 0.01, 0.001, 0.001, 0.001,
                   1, 1, 1, 0.9, 0.9, 0.9, 0.5, 0.5, 0.5, 0.3, 0.3, 0.3,
                   0.1, 0.1, 0.1, 0.01, 0.01, 0.01, 0.001, 0.001, 0.001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'mean_train_score': array([0.99871667, 0.99918333, 0.99871667, 0.99871667, 0.99918333,
       0.99871667, 0.9991    , 0.99911667, 0.9991    , 0.99918333,
       0.99913333, 0.99913333, 0.99918333, 0.99918333, 0.99918333,
       0.99918333, 0.99918333, 0.99918333, 0.99918333, 0.99918333,
       0.99918333, 0.99871667, 0.99918333, 0.99871667, 0.99871667,
       0.99918333, 0.99871667, 0.9991    , 0.99911667, 0.9991    ,
       0.99918333, 0.99913333, 0.99913333, 0.99918333, 0.99918333,
       0.99918333, 0.99918333, 0.99918333, 0.99918333, 0.99918333,
       0.99918333, 0.99918333]), 'mean_score_time': array([0.29701746, 0.72501361, 1.53667772, 0.34073031, 0.82634616,
       1.52906954, 0.30229139, 0.81351578, 1.54071701, 0.21746624,
       0.85261369, 1.54404807, 0.31088805, 0.72367156, 1.52327824,
       0.36505175, 0.71913028, 1.6026746 , 0.24544775, 0.74739408,
       1.57999575, 0.31418002, 0.76971674, 0.7303077 , 0.31657875,
       0.73542404, 1.72014654, 0.22471178, 0.74657607, 1.52967083,
       0.30827737, 0.6868124 , 1.10537243, 0.25086153, 0.74839473,
       0.81134355, 0.32541025, 0.55313921, 0.6415031 , 0.28266764,
       0.37579215, 0.53829789]), 'split0_train_score': array([0.99843333, 0.9992    , 0.99843333, 0.99843333, 0.9992    ,
       0.99843333, 0.9992    , 0.99906667, 0.9992    , 0.9992    ,
       0.9991    , 0.9992    , 0.9992    , 0.9992    , 0.9992    ,
       0.9992    , 0.9992    , 0.9992    , 0.9992    , 0.9992    ,
       0.9992    , 0.99843333, 0.9992    , 0.99843333, 0.99843333,
       0.9992    , 0.99843333, 0.9992    , 0.99906667, 0.9992    ,
       0.9992    , 0.9991    , 0.9992    , 0.9992    , 0.9992    ,
       0.9992    , 0.9992    , 0.9992    , 0.9992    , 0.9992    ,
       0.9992    , 0.9992    ]), 'mean_test_score': array([0.90981667, 0.91721667, 0.92118333, 0.9119    , 0.91415   ,
       0.92095   , 0.91235   , 0.91831667, 0.91546667, 0.91105   ,
       0.91951667, 0.922     , 0.89433333, 0.90813333, 0.91691667,
       0.88603333, 0.88868333, 0.89048333, 0.88498333, 0.88606667,
       0.88653333, 0.91396667, 0.9201    , 0.92271667, 0.91375   ,
       0.91611667, 0.9213    , 0.9146    , 0.92051667, 0.91846667,
       0.9081    , 0.9186    , 0.92006667, 0.89651667, 0.90936667,
       0.91681667, 0.88733333, 0.89268333, 0.89328333, 0.8875    ,
       0.88855   , 0.8881    ]), 'param_algorithm': masked_array(data=['SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME',
                   'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME', 'SAMME'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'split1_test_score': array([0.91593333, 0.92183333, 0.92673333, 0.91653333, 0.91923333,
       0.92576667, 0.91656667, 0.92443333, 0.92083333, 0.914     ,
       0.92353333, 0.92633333, 0.89866667, 0.91113333, 0.92123333,
       0.89126667, 0.8943    , 0.8952    , 0.89003333, 0.8907    ,
       0.89156667, 0.91803333, 0.9239    , 0.92803333, 0.9184    ,
       0.9216    , 0.92546667, 0.91936667, 0.9226    , 0.9202    ,
       0.91366667, 0.92323333, 0.9219    , 0.8984    , 0.9142    ,
       0.92333333, 0.89286667, 0.89613333, 0.8945    , 0.89293333,
       0.8941    , 0.8934    ]), 'std_fit_time': array([2.36269093e+00, 1.02547035e+01, 9.21791705e+01, 3.76081276e+00,
       1.28322341e+01, 1.62899189e+02, 1.75403106e+00, 6.80473936e+00,
       2.68296943e+01, 2.94342995e+00, 1.94229521e+01, 6.16456412e+01,
       1.01524627e+00, 3.49184287e+00, 1.85292685e+00, 6.85109997e+00,
       7.87732470e+00, 2.89556658e+01, 1.95491135e+00, 9.73569512e-01,
       3.94265282e+00, 2.05455208e+01, 4.86326187e+01, 9.39448867e+02,
       1.27671800e+01, 1.46697031e+01, 1.96425974e+04, 2.21608400e-01,
       4.85625725e+01, 1.21744630e+02, 7.77523673e+00, 3.17795684e+01,
       1.22605525e+02, 2.25889447e+01, 2.00059979e+01, 1.54043375e+01,
       1.78746724e+01, 2.43581784e+01, 4.91233907e+01, 4.10104442e+00,
       3.63839471e+01, 3.82901851e+01]), 'std_train_score': array([2.83333333e-04, 1.66666667e-05, 2.83333333e-04, 2.83333333e-04,
       1.66666667e-05, 2.83333333e-04, 1.00000000e-04, 5.00000000e-05,
       1.00000000e-04, 1.66666667e-05, 3.33333333e-05, 6.66666667e-05,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-05, 2.83333333e-04, 1.66666667e-05, 2.83333333e-04,
       2.83333333e-04, 1.66666667e-05, 2.83333333e-04, 1.00000000e-04,
       5.00000000e-05, 1.00000000e-04, 1.66666667e-05, 3.33333333e-05,
       6.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-05, 1.66666667e-05, 1.66666667e-05, 1.66666667e-05,
       1.66666667e-05, 1.66666667e-05])}
================================================================================
Params:
[{'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.9, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.3, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.01, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'gini', 'learning_rate': 0.001, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.9, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.5, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.3, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.1, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.01, 'n_estimators': 50}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 10}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 25}, {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 0.001, 'n_estimators': 50}]
================================================================================
Mean Test Score: [0.90981667 0.91721667 0.92118333 0.9119     0.91415    0.92095
 0.91235    0.91831667 0.91546667 0.91105    0.91951667 0.922
 0.89433333 0.90813333 0.91691667 0.88603333 0.88868333 0.89048333
 0.88498333 0.88606667 0.88653333 0.91396667 0.9201     0.92271667
 0.91375    0.91611667 0.9213     0.9146     0.92051667 0.91846667
 0.9081     0.9186     0.92006667 0.89651667 0.90936667 0.91681667
 0.88733333 0.89268333 0.89328333 0.8875     0.88855    0.8881    ]
================================================================================
Best Params: {'algorithm': 'SAMME', 'base_estimator__splitter': 'best', 'base_estimator__criterion': 'entropy', 'learning_rate': 1, 'n_estimators': 50}
================================================================================



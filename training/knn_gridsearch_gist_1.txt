================================================================================
Command Line:
	train_classifier.py gridsearch gist /mnt/data/GIST/ -gt knn -gc 2 -gp {"n_neighbors":[1, 5, 10, 50], "weights":["uniform", "distance"]}
================================================================================
================================================================================
Loading data...
================================================================================
================================================================================
Feature Type: gist
Number of features: 320
================================================================================


================================================================================
Classifier Type: Grid Search (gridsearch)
================================================================================
Grid Search Enabled!
Grid Search Type: k-Nearest Neighbors (knn)
Grid Search Parameters: {'n_neighbors': [1, 5, 10, 50], 'weights': ['uniform', 'distance']}
================================================================================
Training Class Count:
================================================================================
	Ransom      10000
	Trojan      10000
	Backdoor    10000
	PUA         10000
	Worm        10000
	Virus       10000
================================================================================
Testing Class Count:
================================================================================
	Ransom      10000
	Trojan      10000
	Backdoor    10000
	PUA         10000
	Worm        10000
	Virus       10000
================================================================================


================================================================================
Begin training...
================================================================================
Training time 16869.743243 seconds
================================================================================


================================================================================
Best Score: 0.92835
================================================================================
CV Results:
{'mean_fit_time': array([19.4151926 , 27.08906138, 27.27586484, 28.17794597, 22.80980217,
       17.59089255, 21.59679198, 30.12713861]), 'std_fit_time': array([ 5.99804854,  0.62855017,  0.87098837,  0.33303106,  5.27114618,
       12.86878657,  2.31378078,  0.33240819]), 'mean_score_time': array([1983.41046989, 2127.18594968, 3021.59375417, 3036.31559718,
       3431.95479667, 3843.73982644, 5168.61557162, 5677.11350358]), 'std_score_time': array([ 11.75711882, 132.73395813, 153.15518129, 173.4086324 ,
       128.93762887, 145.81973529, 150.69577181,  75.6405834 ]), 'param_n_neighbors': masked_array(data=[1, 1, 5, 5, 10, 10, 50, 50],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_weights': masked_array(data=['uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance'],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'n_neighbors': 1, 'weights': 'uniform'}, {'n_neighbors': 1, 'weights': 'distance'}, {'n_neighbors': 5, 'weights': 'uniform'}, {'n_neighbors': 5, 'weights': 'distance'}, {'n_neighbors': 10, 'weights': 'uniform'}, {'n_neighbors': 10, 'weights': 'distance'}, {'n_neighbors': 50, 'weights': 'uniform'}, {'n_neighbors': 50, 'weights': 'distance'}], 'split0_test_score': array([0.92106667, 0.92106667, 0.89596667, 0.90743333, 0.869     ,
       0.89746667, 0.7959    , 0.85673333]), 'split1_test_score': array([0.93563333, 0.93563333, 0.91313333, 0.92286667, 0.88586667,
       0.91466667, 0.81146667, 0.87396667]), 'mean_test_score': array([0.92835   , 0.92835   , 0.90455   , 0.91515   , 0.87743333,
       0.90606667, 0.80368333, 0.86535   ]), 'std_test_score': array([0.00728333, 0.00728333, 0.00858333, 0.00771667, 0.00843333,
       0.0086    , 0.00778333, 0.00861667]), 'rank_test_score': array([1, 1, 5, 3, 6, 4, 8, 7], dtype=int32), 'split0_train_score': array([0.99903333, 0.99903333, 0.93383333, 0.99896667, 0.90213333,
       0.99896667, 0.82163333, 0.99896667]), 'split1_train_score': array([0.99903333, 0.99903333, 0.92773333, 0.9986    , 0.8916    ,
       0.99833333, 0.80456667, 0.9986    ]), 'mean_train_score': array([0.99903333, 0.99903333, 0.93078333, 0.99878333, 0.89686667,
       0.99865   , 0.8131    , 0.99878333]), 'std_train_score': array([0.        , 0.        , 0.00305   , 0.00018333, 0.00526667,
       0.00031667, 0.00853333, 0.00018333])}
================================================================================
Params:
[{'n_neighbors': 1, 'weights': 'uniform'}, {'n_neighbors': 1, 'weights': 'distance'}, {'n_neighbors': 5, 'weights': 'uniform'}, {'n_neighbors': 5, 'weights': 'distance'}, {'n_neighbors': 10, 'weights': 'uniform'}, {'n_neighbors': 10, 'weights': 'distance'}, {'n_neighbors': 50, 'weights': 'uniform'}, {'n_neighbors': 50, 'weights': 'distance'}]
================================================================================
Mean Test Score: [0.92835    0.92835    0.90455    0.91515    0.87743333 0.90606667
 0.80368333 0.86535   ]
================================================================================
Best Params: {'n_neighbors': 1, 'weights': 'uniform'}
================================================================================


